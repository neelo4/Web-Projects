import { type BrandDataProps, connectIagBrand } from '@iag-common/iag-brand-context';
import { Button, ButtonGroup, Icon, Link } from '@iag/chroma-react-ui.components';
import { isBefore, startOfToday } from 'date-fns';
import type React from 'react';
import { useState } from 'react';
import { formatDate, parseZonedDate } from '../../../shared/utils/dateUtils';
import { useIdentityContext } from '../../contexts/identityContext';
import { useBrandUtils } from '../../hooks/brand/useBrandUtils';
import type { AssetSummary } from '../../models/AssetSummary';
import { IdentityUserType } from '../../models/IdentityUserType';
import {
  ChangeType,
  type PolicyChange,
  PolicyChangeEnum,
  type PolicyDetails,
} from '../../models/PolicyDetails';
import {
  PolicyStatus,
  isRenewingStatusInRenewals,
  isSupportedRenewalProductType,
} from '../../models/PolicyStatus';
import type { ProductType } from '../../models/ProductType';
import { useIsPolicyAmend } from '../../utils/entitlementsUtils';
import { getPostcodeFromAsset } from '../../utils/getPostcodefromAsset';
import PayLaterModal from '../policies/PayLaterModal';
import PaymentNavigationLink from '../policies/east-ui/PaymentNavigationLink';
import AlertElement from './AlertElement';
import ShowPhoneNumber from './ShowPhoneNumber';
import UnsupportedModalButton from './UnsupportedModalButton';

type Props = {
  renewalsData: PolicyChange;
  productType: ProductType;
  policyNumber: string;
  policyDetails?: PolicyDetails;
  assets?: AssetSummary[];
  policyChanges?: PolicyChange[];
};

export const RenewalNotification: React.FC<BrandDataProps & Props> = ({
  tt,
  t,
  tExists,
  renewalsData,
  productType,
  policyNumber,
  policyDetails,
  assets,
  policyChanges,
}) => {
  const { getFullBrandStringNameByUserType } = useBrandUtils({ tExists });
  const [howToPayModalOpen, setHowToPayModal] = useState(false);

  const { isUserType } = useIdentityContext();
  const canAmend = useIsPolicyAmend(policyDetails?.entitlements);
  const hasAmendAccess = policyDetails?.entitlements ? canAmend : true;
  const isPaymentsEntitlementCreate = isUserType([
    IdentityUserType.PARTNER_CUSTOMER,
    IdentityUserType.IAG_CUSTOMER,
  ]);
  const renewalEnabled = isSupportedRenewalProductType(productType);
  const showMissedInstalment =
    policyDetails.policyStatus === PolicyStatus.PaymentOverdue && policyDetails.directDebit;

  const showPhoneIcon = !renewalEnabled || (renewalEnabled && showMissedInstalment);

  const { number, changeStatus, termEffectiveDate } = renewalsData;

  const dateFormat = 'dd MMMM yyyy';

  const publicPath = window.__CLIENT_VARS__?.publicPath || '/';
  const renewalLink = `${publicPath}policyrenew/policies/${productType}/${policyNumber}/change/${number}/renew/summary`;
  const renewalsStartDate = formatDate(parseZonedDate(termEffectiveDate), dateFormat);

  const renewalsWithDirectDebit = policyChanges?.filter(
    (change) =>
      change?.changeType === ChangeType.RENEWAL &&
      (change?.changeStatus === PolicyChangeEnum.RENEWING ||
        change?.changeStatus === PolicyChangeEnum.QUOTED) &&
      change?.payments?.direct_debit === true
  );
  const shouldNotifyPayment =
    !renewalsWithDirectDebit?.length &&
    (changeStatus === PolicyChangeEnum.RENEWING || changeStatus === PolicyChangeEnum.QUOTED);
  const shouldNotifyReviewRenewal = true;

  // renewalsData !== null &&
  // renewalsData.changeStatus !== PolicyChangeEnum.BOUND &&
  // renewalsData.changeStatus !== PolicyChangeEnum.NOT_TAKEN &&
  // !shouldNotifyPayment;

  const renewalsButtonLabel = tt('pages.policyDetails.renewals.button');

  const unpaidRenewals = policyChanges?.find(
    (change) =>
      change?.changeType === ChangeType.RENEWAL &&
      change?.changeStatus === PolicyChangeEnum.RENEWING &&
      isBefore(startOfToday(), new Date(change?.termEffectiveDate))
  );

  const renderPaymentButton = () => {
    return (
      hasAmendAccess &&
      isPaymentsEntitlementCreate &&
      (assets && unpaidRenewals?.payments?.direct_debit === false ? (
        <PaymentNavigationLink
          productType={productType}
          policyNumber={policyNumber}
          postcode={getPostcodeFromAsset(assets)}
          className="pv-m-0"
          selectedVersionNumber={unpaidRenewals?.versionNumber}
        />
      ) : (
        <Button variant="primary" className="pv-m-0" onClick={() => setHowToPayModal(true)}>
          {tt('pages.policyDetails.renewals.howToPay')}
        </Button>
      ))
    );
  };

  const viewRenewalButton = () => {
    return (
      <Link href={renewalLink} className="pv-m-0 pv-no-underline" variant="buttonPrimaryOutline">
        {renewalsButtonLabel}
      </Link>
    );
  };

  const renderUnsupportedRenewalModal = () => {
    return (
      <UnsupportedModalButton
        buttonVariant={'cta2'}
        modalHeading={tt('constants.unavailableAssetChangeModal.title')}
        modalContent={t('constants.unavailableAssetChangeModal.unsupportedPolicyDescription', {
          policyNumber,
        })}
        policyNumber={policyNumber}
      >
        {renewalsButtonLabel}
        <Icon className="i-phone pv-ml-4 pv-text-xl" />
      </UnsupportedModalButton>
    );
  };

  if (shouldNotifyReviewRenewal) {
    return (
      <AlertElement
        variant="warning"
        trackingName="policy-due-for-renewal-banner"
        className="pv-mb-8"
      >
        <p>
          <strong>
            {tt(getFullBrandStringNameByUserType('pages.policyDetails.renewals.title'))}
          </strong>
        </p>
        <div>
          {tt('pages.policyDetails.renewals.reviewText', { date: renewalsStartDate })}
          {tExists('pages.callUs.showNumberText') ? (
            <ShowPhoneNumber
              maskedNumber={tt('pages.callUs.maskLinkLabel')}
              unmaskedNumber={tt('constants.phoneNumbers.generalEnquiries')}
              prefix={tt('pages.policyDetails.renewals.changesTextPrefix')}
              suffix={tt('pages.policyDetails.renewals.changesTextSuffix')}
            />
          ) : (
            t('pages.policyDetails.renewals.changesText', { date: renewalsStartDate })
          )}
        </div>
        <ButtonGroup className="alert-btn-group">
          {!showPhoneIcon ? viewRenewalButton() : renderUnsupportedRenewalModal()}
        </ButtonGroup>
      </AlertElement>
    );
  }

  if (shouldNotifyPayment) {
    return (
      <>
        <AlertElement
          variant="warning"
          trackingName="renewal-payment-required-banner"
          className="pv-mb-10"
        >
          <p>
            <strong>{tt('pages.policyDetails.renewals.paymentRequired.title')}</strong>
          </p>
          <p>
            {tt('pages.policyDetails.renewals.paymentRequired.message', {
              date: renewalsStartDate,
            })}
          </p>
          <ButtonGroup className="alert-btn-group">
            {!showPhoneIcon ? viewRenewalButton() : renderUnsupportedRenewalModal()}
            {isRenewingStatusInRenewals(policyChanges) && renderPaymentButton()}
          </ButtonGroup>
        </AlertElement>
        {howToPayModalOpen && (
          <PayLaterModal isOpen={true} onClose={() => setHowToPayModal(false)} />
        )}
      </>
    );
  }

  return null;
};

export default connectIagBrand()(RenewalNotification);
