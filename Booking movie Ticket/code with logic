import { type BrandDataProps, connectIagBrand } from '@iag-common/iag-brand-context';
import { addDays } from 'date-fns';
import { get } from 'lodash';
import type React from 'react';
import { useState } from 'react';
import { FeatureName, useFeaturesConfig } from '../../../../../features-config';
import { formatDate, parseZonedDate } from '../../../../../shared/utils/dateUtils';
import { useBrandUtils } from '../../../../hooks/brand/useBrandUtils';
import type { PolicySummary } from '../../../../models/DashboardDetails';
import { PaymentSummaryStatus } from '../../../../models/PaymentSummaryStatus';
import { PaymentType } from '../../../../models/PaymentType';
import {
  PolicyStatus,
  PolicyStatusOrder,
  findBoundRenewalAfterEffectiveDate,
  findEqualOrAfterChangeEffectiveDate,
  findOverdueRenewal,
  findRenewalPaidBeforeEffectiveDate,
  findUnpaidFutureRenewalPolicy,
  isCoexistencePolicy,
  isCtpNSWPolicy,
  isDateWithinSevenDays,
  isFutureDatedCancellation,
  isInactiveNSW,
  isMigratedPolicy,
  isMigratedRenewalPolicy,
  isOverDueRenewals,
  isPaidMigratedTermPolicy,
  isPolicyChangeRenewal,
  isPolicyInactive,
  isSupportedRenewalProductType,
  isUnpaid,
} from '../../../../models/PolicyStatus';
import PayLaterModal from '../../PayLaterModal';
import PolicyNotification from './PolicyNotification';
import { Link } from '@iag/chroma-react-ui.components';

export type Props = {
  policy: PolicySummary;
};

const PolicyStatusNotification: React.FC<Props & BrandDataProps> = ({ t, tt, tExists, policy }) => {
  // ... (existing state and constants)
  const [showNumber, setShowNumber] = useState(false);

  // ... (existing code remains unchanged)

  const onShowNumberClick = () => {
    setShowNumber(true);
  };

  const renderPhoneNumber = () => {
    if (showNumber) {
      return (
        <Link href={`tel:${tt('constants.phoneNumbers.generalEnquiries')}`}>
          {tt('constants.phoneNumbers.generalEnquiries')}
        </Link>
      );
    }
    return (
      <>
        1300... <Link onClick={onShowNumberClick}>Show number</Link>
      </>
    );
  };

  if (showMissedInstalment) {
    return (
      <PolicyNotification
        type="warning"
        label={tt('labels.missedInstalment')}
        subtext={
          <>
            {t(getFullBrandStringNameByUserType('labels.missedInstalmentSubtext'))} {renderPhoneNumber()}
          </>
        }
      />
    );
  }

  // ... (rest of the existing code remains unchanged)

  return <></>;
};

export default connectIagBrand()(PolicyStatusNotification);
