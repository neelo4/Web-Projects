function PhoneNumber({
  content,
  pagename,
  args,
  tt,
  t,
  tExists,
  variant = 'default',
}: PhoneNumberProps & BrandDataProps): JSX.Element {
  const [showNumber, setShowNumber] = useState(false);
  const trackingEventContext = useContext(SiteTrackingContext);
  const { isMobileApp } = useBrowserDetect();

  const maskedNumber = tt('constants.phoneNumbers.maskGeneralEnquiries');
  const unmaskedNumber = tt('constants.phoneNumbers.generalEnquiries');
  const telLink = tt('constants.phoneNumbers.generalEnquiriesTelLink');
  const showNumberText = tt('pages.callUs.showNumberText');

  const revealNumberEvent = () => {
    trackingEventContext?.dispatch({
      pageName: pagename || PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        name: ElementName.CALLUS,
        value: ActionName.SHOW_NUMBER,
        type: ElementType.LINK,
      },
    });
  };

  const clickedNumberEvent = () => {
    trackingEventContext?.dispatch({
      pageName: pagename || PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        name: ElementName.CALLUS,
        value: unmaskedNumber.replaceAll(' ', '-'),
        type: ElementType.LINK,
      },
    });
  };

  const handleShowNumber = (e: React.MouseEvent) => {
    e.preventDefault();
    revealNumberEvent();
    setShowNumber(true);
  };

  const handleNumberClick = () => {
    clickedNumberEvent();
  };

  if (variant === 'buttonPrimary') {
    return (
      <Button
        variant="primary"
        onClick={showNumber ? handleNumberClick : handleShowNumber}
        className="pv-m-0 gap-1"
      >
        {showNumber ? (
          <Link href={telLink} onClick={handleNumberClick} className="text-white no-underline">
            {unmaskedNumber}
          </Link>
        ) : (
          <>
            <span className="text-white">{maskedNumber}</span>
            <Link onClick={handleShowNumber} className="text-white hover:text-blue-800">
              {showNumberText}
            </Link>
          </>
        )}
      </Button>
    );
  }

  const ttContent = (tt(content, args) || '').replaceAll('{target=_blank}', '');

  return !ttContent.includes(telLink) || isMobileApp || !tExists('pages.callUs.showNumberText') ? (
    <>{t(content, args)}</>
  ) : (
    <Markdown
      content={ttContent}
      telLink={telLink}
      showNumber={showNumber}
      maskedNumber={maskedNumber}
      unmaskedNumber={unmaskedNumber}
      showNumberText={showNumberText}
      revealPhone={handleShowNumber}
    />
  );
}

// Now integrating this into UnsupportedModalButton
const UnsupportedModalButton: React.FC<PropsWithChildren<Props> & BrandDataProps> = ({}) => {
  return (
    <Modal>
      <ButtonGroup>
        {!hideBackButton && (
          <Button variant="primaryOutline" onClick={closeHandler} className="pv-m-0">
            {tt('labels.back')}
          </Button>
        )}
        <Link className="pv-m-0" href={tt('constants.phoneNumbers.generalEnquiriesTelLink')} variant="buttonPrimary">
          <PhoneNumber content="constants.documentTypes.callUsButton" pagename={PageName.POLICY_DETAILS} variant="buttonPrimary" />
        </Link>
      </ButtonGroup>
    </Modal>
  );
};

export default connectIagBrand()(UnsupportedModalButton);
