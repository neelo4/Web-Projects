import { type BrandDataProps } from '@iag-common/iag-brand-context';
import { Button } from '@iag/chroma-react-ui.button';
import { Link } from '@iag/chroma-react-ui.link';
import type React from 'react';
import { useContext, useState } from 'react';
import useBrowserDetect from '../../hooks/useBrowserDetect';
import { ElementType, Interaction } from '../../models/SiteTracking';
import { SiteTrackingContext } from '../../sitetracking/SiteTrackingProvider';
import NavigationLink from './NavigationLink';

type ShowPhoneNumberProps = {
  maskedNumber: string;
  unmaskedNumber: string;
  variant?: 'link' | 'buttonPrimary';
  className?: string;
  onClick?: () => void;
};

const ShowPhoneNumber: React.FC<ShowPhoneNumberProps & BrandDataProps> = ({
  tt,
  maskedNumber,
  unmaskedNumber,
  variant = 'link',
  className = '',
  onClick
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const [showLink, setShowLink] = useState(true);
  const trackingEventContext = useContext(SiteTrackingContext);
  const { isMobileApp } = useBrowserDetect();

  const revealNumberEvent = () => {
    const revealNumber = {
      pageName: '/dashboard',
      interaction: Interaction.CLICK,
      element: {
        name: 'call-us',
        value: 'show-number',
        type: ElementType.LINK,
      },
    };
    trackingEventContext.dispatch(revealNumber);
  };

  const clickedNumberEvent = () => {
    const clickedNumber = {
      pageName: '/dashboard',
      interaction: Interaction.CLICK,
      element: {
        name: 'call-us',
        value: '1300-332-048',
        type: ElementType.LINK,
      },
    };
    trackingEventContext.dispatch(clickedNumber);
  };

  const handleShowNumber = (e: React.MouseEvent) => {
    revealNumberEvent();
    e.preventDefault();
    setIsVisible(true);
    setShowLink(false);
  };

  const handleNumberClick = () => {
    clickedNumberEvent();
    onClick?.();
  };

  if (isMobileApp) {
    return variant === 'buttonPrimary' ? (
      <Button variant="primary" onClick={handleNumberClick} className={className}>
        {unmaskedNumber}
      </Button>
    ) : (
      <NavigationLink
        to={tt('pages.callUs.link')}
        onClick={handleNumberClick}
        newWindow={true}
        isInternalLink={true}
        className={`text-blue-600 underline ${className}`}
      >
        {unmaskedNumber}
      </NavigationLink>
    );
  }

  if (variant === 'buttonPrimary') {
    return (
      <Button variant="primary" onClick={isVisible ? handleNumberClick : handleShowNumber} className={className}>
        {isVisible ? unmaskedNumber : maskedNumber}
      </Button>
    );
  }

  return (
    <span className={`inline-flex items-center ${className}`}>
      {isVisible ? (
        <NavigationLink
          to={tt('pages.callUs.link')}
          onClick={handleNumberClick}
          newWindow={true}
          isInternalLink={true}
          className="text-blue-600 underline"
        >
          {unmaskedNumber}
        </NavigationLink>
      ) : (
        <span className="text-blue-600">{maskedNumber}</span>
      )}
      {showLink && (
        <Link
          onClick={handleShowNumber}
          className="text-blue-600 hover:text-blue-800 text-sm underline focus:outline-none"
        >
          {tt(`pages.callUs.showNumberText`)}
        </Link>
      )}
    </span>
  );
};

export default ShowPhoneNumber;
