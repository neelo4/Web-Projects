import { type BrandDataProps, connectIagBrand } from '@iag-common/iag-brand-context';
import {
  Button,
  ButtonGroup,
  type ButtonProps,
  Link,
  Modal,
} from '@iag/chroma-react-ui.components';
import type React from 'react';
import { type PropsWithChildren, useContext, useState } from 'react';
import { useRecordReferredToAssistedChannel } from '../../hooks/useRecordContactHistory';
import { ActionName, ElementName, ElementType, Interaction } from '../../models/SiteTracking';
import { getBrand } from '../../models/brands';
import { SiteTrackingContext } from '../../sitetracking/SiteTrackingProvider';

type Props = {
  buttonVariant?: ButtonProps['variant'];
  hideBackButton?: boolean;
  modalContent: React.ReactNode;
  modalHeading: string;
  policyNumber?: string;
  testid?: string;
  trackClick?: (action: { name: string; type: string; interaction: string }) => void;
  trackingName?: string;
};

const UnsupportedModalButton: React.FC<PropsWithChildren<Props> & BrandDataProps> = ({
  buttonVariant = 'primary',
  children,
  hideBackButton = false,
  modalHeading,
  modalContent,
  policyNumber,
  testid = '',
  tt,
  trackClick,
  trackingName,
}) => {
  const [showModal, setShowModal] = useState(false);
  const recordReferredToAssistedChannel = useRecordReferredToAssistedChannel(policyNumber);
  const buttonType = tt('constants.cancelPolicyModal.siteTracking.elementsType.button');
  const clickInteraction = tt('constants.cancelPolicyModal.siteTracking.interactions.click');
  const trackingEventContext = useContext(SiteTrackingContext);

  const clickHandler = () => {
    trackingEventContext.dispatch({
      interaction: Interaction.SHOW,
      element: {
        type: ElementType.MODAL,
        name: ElementName.CONTINUE_ON_PHONE,
      },
      data: {
        referralCodes: [ActionName.RENEWAL_UNSUPPORTED],
        referral: true,
      },
    });

    recordReferredToAssistedChannel();
    setShowModal(true);
    if (trackClick) {
      trackClick({
        name: tt('constants.cancelPolicyModal.siteTracking.elementsName.modal'),
        type: tt('constants.cancelPolicyModal.siteTracking.elementsType.modal'),
        interaction: tt('constants.cancelPolicyModal.siteTracking.interactions.show'),
      });
    }
  };

  const closeHandler = () => {
    setShowModal(false);
    if (trackClick) {
      trackClick({
        name: tt('constants.cancelPolicyModal.siteTracking.elementsName.close'),
        type: buttonType,
        interaction: clickInteraction,
      });
      trackClick({
        name: tt('constants.cancelPolicyModal.siteTracking.elementsName.modal'),
        type: tt('constants.cancelPolicyModal.siteTracking.elementsType.modal'),
        interaction: tt('constants.cancelPolicyModal.siteTracking.interactions.hide'),
      });
    }
  };
  return (
    <div data-testid={testid}>
      <Button
        className="pv-m-0 pv-w-full sm:pv-w-fit md:pv-w-fit"
        variant={buttonVariant}
        onClick={clickHandler}
        data-testid="unsupported-modal-button"
        data-tracking-name={trackingName}
      >
        {children}
      </Button>
      <Modal
        appElement={document.getElementById('root')}
        brand={getBrand()}
        className="pv-mfe-modal"
        describedby=""
        id="unsupported-modal"
        isOpen={showModal}
        labelledby={modalHeading}
        onClose={closeHandler}
      >
        <h3 className="h3" data-testid="unsupported-modal-heading">
          {modalHeading}
        </h3>
        <div data-testid="modal-content">{modalContent}</div>
        <ButtonGroup className="pv-flex pv-flex-col sm:pv-flex-row pv-w-full pv-gap-y-0 sm:pv-gap-x-4 pv-m-0">
          {!hideBackButton && (
            <Button variant="primaryOutline" onClick={closeHandler} className="pv-m-0">
              {tt('labels.back')}
            </Button>
          )}
          <Link
            className="pv-m-0"
            href={tt('constants.phoneNumbers.generalEnquiriesTelLink')}
            variant="buttonPrimary"
            onClick={() =>
              trackClick?.({
                name: tt('constants.cancelPolicyModal.siteTracking.elementsName.call'),
                type: buttonType,
                interaction: clickInteraction,
              })
            }
          >
            {tt('constants.documentTypes.callUsButton')}
          </Link>
        </ButtonGroup>
      </Modal>
    </div>
  );
};

export default connectIagBrand()(UnsupportedModalButton);
