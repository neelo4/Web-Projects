import React, { ReactNode, useContext, useState } from 'react';
import ReactMarkdown from 'react-markdown';
import { Button } from '@iag/chroma-react-ui.components';
import { Link } from '@iag/chroma-react-ui.components';
import { BrandDataProps, connectIagBrand } from '@iag-common/iag-brand-context';
import useBrowserDetect from '../../hooks/useBrowserDetect';
import {
  ActionName,
  ElementName,
  ElementType,
  Interaction,
  PageName,
} from '../../models/SiteTracking';
import { SiteTrackingContext } from '../../sitetracking/SiteTrackingProvider';

interface PhoneNumberProps {
  content: string;
  pagename?: string;
  args?: object;
  variant?: 'buttonPrimary' | 'default';
}

interface MarkdownProps {
  content: string;
  telLink: string;
  showNumber: boolean;
  maskedNumber: string;
  unmaskedNumber: string;
  showNumberText: string;
  revealPhone: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
}

function MarkdownLinkRenderer(
  href: string,
  children: ReactNode & ReactNode[],
  {
    telLink,
    showNumber,
    maskedNumber,
    unmaskedNumber,
    showNumberText,
    revealPhone,
  }: Omit<MarkdownProps, 'content'>
) {
  if (href === telLink) {
    return (
      <>
        {!showNumber && maskedNumber}
        <Link data-testid="phoneNumberLink" onClick={revealPhone}>
          {showNumber ? unmaskedNumber : <span className="ml-2">{showNumberText}</span>}
        </Link>
      </>
    );
  } else {
    return (
      <Link target="_blank" href={href}>
        {children}
      </Link>
    );
  }
}

function Markdown({ content, ...other }: MarkdownProps) {
  return (
    <ReactMarkdown
      components={{
        a: ({ children, href }) => {
          return MarkdownLinkRenderer(href || '', children, other);
        },
      }}
    >
      {content}
    </ReactMarkdown>
  );
}

function PhoneNumber({
  content,
  pagename,
  args,
  tt,
  t,
  tExists,
  variant = 'default',
}: PhoneNumberProps & BrandDataProps): JSX.Element {
  const [showNumber, setShowNumber] = useState(false);
  const trackingEventContext = useContext(SiteTrackingContext);
  const { isMobileApp } = useBrowserDetect();
  
  const maskedNumber = tt('constants.phoneNumbers.maskGeneralEnquiries');
  const unmaskedNumber = tt('constants.phoneNumbers.generalEnquiries');
  const telLink = tt('constants.phoneNumbers.generalEnquiriesTelLink');
  const showNumberText = tt('pages.callUs.showNumberText');
  const ttContent = (tt(content, args) || '').replaceAll('{target=_blank}', '');

  const revealNumberEvent = () => {
    const revealNumber = {
      pageName: pagename || PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        name: ElementName.CALLUS,
        value: ActionName.SHOW_NUMBER,
        type: ElementType.LINK,
      },
    };
    trackingEventContext?.dispatch(revealNumber);
  };

  const clickedNumberEvent = () => {
    const clickedNumber = {
      pageName: pagename || PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        name: ElementName.CALLUS,
        value: unmaskedNumber.replaceAll(' ', '-'),
        type: ElementType.LINK,
      },
    };
    trackingEventContext?.dispatch(clickedNumber);
  };

  const handleShowNumber = (e: React.MouseEvent) => {
    e.preventDefault();
    revealNumberEvent();
    setShowNumber(true);
  };

  const handleNumberClick = () => {
    clickedNumberEvent();
  };

  if (!ttContent.includes(telLink) || isMobileApp || !tExists('pages.callUs.showNumberText')) {
    return <>{t(content, args)}</>;
  }

  if (variant === 'buttonPrimary') {
    return (
      <Button
        variant="primary"
        onClick={showNumber ? handleNumberClick : handleShowNumber}
        className="pv-m-0 gap-1"
      >
        <span className="inline-flex items-center gap-1">
          {t(content, args)} {/* This will show "Call us on" or any other prefix */}
          {showNumber ? (
            <Link
              href={telLink}
              onClick={handleNumberClick}
              target="_blank"
              className="text-white no-underline"
            >
              {unmaskedNumber}
            </Link>
          ) : (
            <>
              <span className="text-white">{maskedNumber}</span>
              <Link
                onClick={handleShowNumber}
                className="text-white hover:text-blue-800 text-sm focus:outline-none"
              >
                {showNumberText}
              </Link>
            </>
          )}
        </span>
      </Button>
    );
  }

  return (
    <Markdown
      content={ttContent}
      telLink={telLink}
      showNumber={showNumber}
      maskedNumber={maskedNumber}
      unmaskedNumber={unmaskedNumber}
      showNumberText={showNumberText}
      revealPhone={handleShowNumber}
    />
  );
}

export default connectIagBrand()(PhoneNumber);
