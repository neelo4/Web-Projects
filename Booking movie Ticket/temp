import { render, screen, fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { UnsupportedModalButton } from './UnsupportedModalButton';

describe('UnsupportedModalButton', () => {
  const mockButtonTitle = 'Test Button';
  const mockTExists = jest.fn();
  const mockTt = jest.fn();

  beforeEach(() => {
    mockTExists.mockReset();
    mockTt.mockReset();
  });

  // Existing test for non-NRMA brands
  it('link in modal should work correctly for other brands', () => {
    mockTExists.mockReturnValue(false);
    mockTt.mockImplementation((key) => {
      if (key === 'constants.phoneNumbers.generalEnquiriesTelLink') return 'tel:0800200252';
      return key;
    });

    render(
      <UnsupportedModalButton
        buttonTitle={mockButtonTitle}
        tt={mockTt}
        tExists={mockTExists}
      />
    );

    userEvent.click(screen.getByRole('button', { name: mockButtonTitle }));
    expect(screen.getByText('Call us on 0800 200 252').closest('a')).toHaveAttribute(
      'href',
      'tel:0800200252'
    );
  });

  // New test for NRMA brand with ShowPhoneNumber
  it('show number component should work correctly in modal for NRMA', () => {
    mockTExists.mockImplementation((key) => key === 'pages.callUs.showNumberText');
    mockTt.mockImplementation((key) => {
      switch (key) {
        case 'pages.callUs.maskLinkLabel':
          return '1300 XXX XXX';
        case 'constants.phoneNumbers.generalEnquiries':
          return '1300 332 048';
        case 'constants.documentTypes.callUsButtonRevealPhoneNumber':
          return 'Call us on';
        case 'pages.callUs.showNumberText':
          return 'Show number';
        default:
          return key;
      }
    });

    render(
      <UnsupportedModalButton
        buttonTitle={mockButtonTitle}
        tt={mockTt}
        tExists={mockTExists}
      />
    );

    // Click to open modal
    userEvent.click(screen.getByRole('button', { name: mockButtonTitle }));

    // Initially should show masked number
    expect(screen.getByText('1300 XXX XXX')).toBeInTheDocument();
    expect(screen.getByText('Show number')).toBeInTheDocument();

    // Click show number
    userEvent.click(screen.getByText('Show number'));

    // Should now show unmasked number
    const numberLink = screen.getByText('1300 332 048');
    expect(numberLink).toBeInTheDocument();
    expect(numberLink.closest('a')).toHaveAttribute('href', 'tel:1300332048');
    
    // Show number link should be gone
    expect(screen.queryByText('Show number')).not.toBeInTheDocument();
  });

  it('should handle tracking events when showing and clicking number', () => {
    mockTExists.mockReturnValue(true);
    const mockTrackingContext = {
      dispatch: jest.fn()
    };

    render(
      <UnsupportedModalButton
        buttonTitle={mockButtonTitle}
        tt={mockTt}
        tExists={mockTExists}
        trackingEventContext={mockTrackingContext}
      />
    );

    userEvent.click(screen.getByRole('button', { name: mockButtonTitle }));
    userEvent.click(screen.getByText('Show number'));

    expect(mockTrackingContext.dispatch).toHaveBeenCalledWith(
      expect.objectContaining({
        interaction: 'CLICK',
        element: expect.objectContaining({
          name: 'call-us',
          value: 'show-number'
        })
      })
    );

    userEvent.click(screen.getByText('1300 332 048'));

    expect(mockTrackingContext.dispatch).toHaveBeenCalledWith(
      expect.objectContaining({
        interaction: 'CLICK',
        element: expect.objectContaining({
          name: 'call-us',
          value: '1300-332-048'
        })
      })
    );
  });
});
