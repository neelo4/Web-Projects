import { BrandDataProps, connectIagBrand } from '@iag-common/iag-brand-context';
import { GlobalEventsContext } from '@iag-common/mfe-global-events-context';
import { Button } from '@iag/chroma-react-ui.button';
import { Spinner } from '@iag/chroma-react-ui.spinner';
import React, { useCallback, useContext, useEffect, useMemo, useState, Suspense } from 'react';
import { useNavigate } from 'react-router-dom';
import { AppContext, AppState } from '../../../AppContext';
import { getBrand } from '../../../brand';
import { DOOTB_GOB_STEPS, DOOTB_ONBOARDING_TYPE } from '../../../components/shared/Constants';

// Lazy load the sections
const DownloadAppSection = React.lazy(() => import('./DownloadAppSection'));
const EDocsSection = React.lazy(() => import('./EDocsSection'));

type DigitalSetupPage = {
  handleSubmit?: (stepNumber: string) => void;
};

const DigitalSetupPage: React.FC<BrandDataProps & DigitalSetupPage> = ({ tt, handleSubmit }) => {
  const { appState, setAppState } = useContext(AppContext);
  const onboardingType = appState?.onboardingAndEdocsResult?.onboardingType;
  const eDocsUpdated = appState?.onboardingAndEdocsResult?.eDocsStatus;

  // Memoize these values to prevent unnecessary recalculations
  const brand = useMemo(() => getBrand(), []);
  const partyId = useMemo(() => getPartyId(), []);
  const primaryEmail = appState?.email;

  const [isEDocsConsentChecked, setIsEDocsConsentChecked] = useState<boolean>(true);
  const [isEDocsRequestComplete, setIsEDocsRequestComplete] = useState<boolean>(false);
  const [isResponseLoading, setIsResponseLoading] = useState<boolean>(false);
  const [isFormStarted, setIsFormStarted] = useState(false);

  const navigate = useNavigate();
  const trackingEventContext = useContext(SiteTrackingContext);
  const globalEventsContext = useContext(GlobalEventsContext);

  // Memoize static values
  const siteTrackingData = useMemo(() => ({
    pageName: PageName.ONBOARDING_SETUP,
    globalEventsContext,
  }), [globalEventsContext]);

  const isGeneralOnboarding = useMemo(() => 
    onboardingType === DOOTB_ONBOARDING_TYPE.GENERAL_ONBOARDING,
    [onboardingType]
  );
  
  const isMigrationOnboarding = useMemo(() => 
    onboardingType === DOOTB_ONBOARDING_TYPE.MIGRATION_ONBOARDING,
    [onboardingType]
  );

  // Memoize event handlers
  const handleCheckboxEdocsEvent = useCallback((e: CustomEvent<{ status: boolean }>) => {
    if (!isFormStarted) {
      setIsFormStarted(true);
    }
    setIsEDocsConsentChecked(e.detail.status);
  }, [isFormStarted]);

  const handleSaveEdocsEvent = useCallback((e: CustomEvent<{ status: boolean; loadingStatus: boolean }>) => {
    const responseStatus = e.detail.status;
    if (responseStatus !== undefined) {
      setIsResponseLoading(e.detail.loadingStatus);
      setIsEDocsRequestComplete(!e.detail.loadingStatus && (responseStatus === true || responseStatus === false));
      setAppState((prevState: AppState): AppState => ({
        ...prevState,
        onboardingAndEdocsResult: {
          ...prevState.onboardingAndEdocsResult,
          eDocsResponseStatus: e.detail.status,
        },
      }));
    }
  }, []);

  const handleSave = useCallback(() => {
    if (isGeneralOnboarding) {
      trackingEventWrapper({
        ...siteTrackingData,
        details: {
          interaction: Interaction.CLICK,
          transactionActivities: Activities.GENERAL_ONBOARDING,
          element: {
            form: FormName.GENERAL_ONBOARDING,
            type: ElementType.BUTTON,
            name: ActionName.SAVE_AND_CONTINUE,
          },
        },
      });
    }

    if (!isEDocsConsentChecked || eDocsUpdated) {
      if (isGeneralOnboarding) {
        handleSubmit?.(DOOTB_GOB_STEPS.NEXT_BEST_ACTION_PAGE);
      } else if (isMigrationOnboarding) {
        exitOnboardingModule();
        navigate('/');
      }
    } else {
      triggerOnboardingSaveEDocsEvent(true);
    }
  }, [isGeneralOnboarding, isMigrationOnboarding, isEDocsConsentChecked, eDocsUpdated]);

  const handleSetting = useCallback((settingStatus: boolean) => {
    if (settingStatus) {
      trackingEventWrapper({
        ...siteTrackingData,
        details: {
          interaction: Interaction.CLICK,
          transactionComplete: true,
          transactionType: TransactionType.DOOTB_ONBOARDING,
          transactionActivities: isGeneralOnboarding ? ActionName.GENERAL_ONBOARDING : Activities.MIGRATION_ONBOARDING,
          element: {
            form: isGeneralOnboarding ? FormName.GENERAL_ONBOARDING : FormName.MIGRATION_ONBOARDING,
            type: ElementType.LINK,
            name: ActionName.DOOTB_LINK_CLICK,
          },
        },
      });
      exitOnboardingModule();
    }
  }, [isGeneralOnboarding, siteTrackingData]);

  // Event listeners setup
  useEffect(() => {
    window.addEventListener('policy_corres_mgmt_mfe:checkbox_edocs', handleCheckboxEdocsEvent);
    window.addEventListener('policy_corres_mgmt_mfe:save_edocs', handleSaveEdocsEvent);
    
    return () => {
      window.removeEventListener('policy_corres_mgmt_mfe:checkbox_edocs', handleCheckboxEdocsEvent);
      window.removeEventListener('policy_corres_mgmt_mfe:save_edocs', handleSaveEdocsEvent);
    };
  }, [handleCheckboxEdocsEvent, handleSaveEdocsEvent]);

  return (
    <div data-testid="general-digital-setup-page" className="flex flex-col gap-8 pt-4 pr-4 sm:pt-0">
      <div className="flex flex-col gap-3 mt-8 sm:mt-12">
        {isGeneralOnboarding && (
          <p data-testid="step-number" className="text-base sm:text-lg font-medium">
            {tt('onboardingModule.page2Common.step')}
          </p>
        )}
        <h2 data-testid="page-title" className="-mt-2 text-xl sm:text-2xl sm:pb-4 font-medium">
          {tt('onboardingModule.page2Common.title')}
        </h2>
        <p data-testid="page-selection" className="sm:-mt-4 text-base mb-0 font-normal">
          {tt('onboardingModule.page2Common.subTitle')}
        </p>
      </div>

      <Suspense fallback={<div>Loading app section...</div>}>
        <DownloadAppSection />
      </Suspense>

      <Suspense fallback={<div>Loading EDocs section...</div>}>
        <EDocsSection
          brand={brand}
          partyId={partyId}
          primaryEmail={primaryEmail}
          eDocsStatus={eDocsUpdated}
          handleSettingLink={handleSetting}
          setIsEDocsRequestComplete={setIsEDocsRequestComplete}
          setIsResponseLoading={setIsResponseLoading}
        />
      </Suspense>

      <div className="flex flex-col flex-wrap gap-8 sm:flex-row">
        <Button 
          data-testid="continue-setup-button" 
          variant="primary" 
          className="mt-3 ml-6"
          onClick={handleSave}
          disabled={isResponseLoading}
        >
          {isResponseLoading ? (
            <>
              <Spinner
                id="loading-spinner"
                data-testid="test-loading-spinner"
                variant="inverse"
                className="mr-3"
                width="28"
              />
              {tt('onboardingModule.page2Common.buttonSaving')}
            </>
          ) : (
            eDocsUpdated
              ? tt('onboardingModule.page2Common.buttonContinue')
              : tt('onboardingModule.page2Common.buttonSaveAndContinue')
          )}
        </Button>
      </div>
    </div>
  );
};

export default React.memo(connectIagBrand()(DigitalSetupPage));
