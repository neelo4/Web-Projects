import { gql } from '@apollo/client';
import _ from 'lodash';
import { useContext, useEffect } from 'react';
import { AppContext, AppState } from '../../AppContext';
import { ONBOARDING_KEY } from '../../components/shared/Constants';
import { FeatureName, useFeaturesConfig } from '../../features-config';
import { mapOnboardingorEdocsStatus } from '../../mappers/mapOnboardingOrEdocsDetails';
import { OnboardingAndEdocsStatus } from '../../models/OnboardingModule';
import { getActivePolicyStatus } from '../../models/PolicyStatus';
import { ElementType, Interaction } from '../../models/SiteTracking';
import { SiteTrackingContext } from '../../sitetracking/SiteTrackingProvider';
import useBrowserDetect from '../useBrowserDetect';
import { useApiQuery } from './useApi';

const GET_ONBOARDING_OR_EDOCS_STATUS = () => gql`
  query getOnboardingAndEdocsStatus($policy_statuses: [String]) {
    getOnboardingAndEdocsStatus(policyStatuses: $policy_statuses)
  }
`;

export const useGetOnboardingAndEdocsDetails = (
  setOnboardingAndEdocsResult: (data: OnboardingAndEdocsStatus) => void,
) => {
  const { setAppState } = useContext(AppContext);
  const showOnboardingModule = useFeaturesConfig(FeatureName.SHOW_DOOTB_ONBOARDING);
  const showEdocsModal = useFeaturesConfig(FeatureName.SHOW_DOOTB_EDOCS_MODAL);
  const { isMobileApp } = useBrowserDetect();
  const savedState = sessionStorage.getItem(ONBOARDING_KEY);
  const trackingEventContext = useContext(SiteTrackingContext);

  const { data, loading, error } = useApiQuery(GET_ONBOARDING_OR_EDOCS_STATUS(), mapOnboardingorEdocsStatus, {
    staleWhileRevalidate: true,
    variables: {
      policy_statuses: getActivePolicyStatus(),
    },
    skip: isMobileApp || !!savedState || (!showOnboardingModule && !showEdocsModal),
    onCompleted: (data) => {
      if (!!data?.getOnboardingAndEdocsStatus) {
        setAppState((prev: AppState) => ({
          ...prev,
          onboardingAndEdocsResult: _.omit(data?.getOnboardingAndEdocsStatus, 'policies'),
        }));
      }
    },
  });

  useEffect(() => {
    setOnboardingAndEdocsResult({ ...data, ...{ isLoading: loading } });

    if (data?.eDocsStatus) {
      trackingEventContext.dispatch({
        interaction: Interaction.HIDE,
        element: {
          name: 'skip-onboarding',
          value: 'edocs-enabled',
          type: ElementType.MESSAGE,
        },
      });
    }
  }, [loading, data]);

  return { data, loading, hasAuthenticationError: false, error };
};
