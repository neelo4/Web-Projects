import { GlobalEventsContext } from '@iag-common/mfe-global-events-context';
import { Button } from '@iag/chroma-react-ui.button';
import { Checkbox, CheckboxProps } from '@iag/chroma-react-ui.checkbox';
import { Input } from '@iag/chroma-react-ui.input';
import { Message } from '@iag/chroma-react-ui.message';
import { Spinner } from '@iag/chroma-react-ui.spinner';
import noop from 'lodash/noop';
import { useContext, useEffect, useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { AppContext } from '../../AppContext';
import eDocsImage from '../../assets/images/eDoc_image.svg';
import { useSaveEDocs } from '../../hooks/useSaveEDocs';
import {
  ActionName,
  ActionValue,
  ElementType,
  Errors,
  FormName,
  Interaction,
  PageName,
  SubType,
} from '../../models/SiteTracking';
import { triggerSaveEDocsEvent } from '../../utils/eDocsUtils';
import { trackingEventWrapper } from '../../utils/trackingEventWrapper';
import { withGlobalEvents } from '@iag-common/mfe-site-tracking';
import { ChromaProps, moduleInfo, withChroma } from '../../utils';
import { useNavigate } from 'react-router-dom';
import { EDocsConversionProps } from '../../models/EdocsConversion';
import { Link } from '@iag/chroma-react-ui.link';

const EDocsConversionView = (eDocProps: EDocsConversionProps) => {
  const { t } = useTranslation();
  const [isError, setIsError] = useState<boolean>(false);
  const [isNoteExpanded, setIsNoteExpanded] = useState<boolean>(false);
  const { updateEDocsCorrespondence, response, error, isLoading } = useSaveEDocs(eDocProps);
  const [consent, setConsent] = useState<CheckboxProps['value']>([]);
  const [consentError, setConsentError] = useState('');
  const [saveEventTriggered, setSaveEventTriggered] = useState<boolean>(false);

  const VALUE_EDOC_CONSENT = 'yes';
  const consentIsGiven = useMemo(() => consent.includes(VALUE_EDOC_CONSENT), [consent]);

  const { appState } = useContext(AppContext);
  const globalEventsContext = useContext(GlobalEventsContext);
  const navigate = useNavigate();

  useEffect(() => {
    triggerSaveEDocsEvent(response.status, saveEventTriggered);
  }, [saveEventTriggered]);

  const toggleNote = () => {
    setIsNoteExpanded(!isNoteExpanded);
    trackingEventWrapper(appState, globalEventsContext, {
      pageName: PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        form: FormName.EDOCS_MODAL,
        name: isNoteExpanded ? 'COLLAPSE_NOTE' : 'EXPAND_NOTE',
        type: ElementType.BUTTON,
      },
    });
  };

  const handleConsent = (_: React.ChangeEvent<HTMLInputElement>, value: string[]): void => {
    setConsent(value);
    setConsentError('');

    trackingEventWrapper(appState, globalEventsContext, {
      pageName: PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        form: FormName.EDOCS_MODAL,
        name: ActionName.EDOCS_EMAIL_CONFIRMATION,
        type: ElementType.CHECKBOX,
        value: value.length > 0 ? ActionValue.CHECKED : ActionValue.UNCHECKED,
      },
    });
  };

  const saveChangesHandler = () => {
    setConsentError('');
    setSaveEventTriggered(true);
    if (!consentIsGiven) {
      setConsentError('Select checkbox');
      trackingEventWrapper(appState, globalEventsContext, {
        pageName: PageName.DASHBOARD,
        interaction: Interaction.ERROR,
        element: {
          form: FormName.EDOCS_MODAL,
          name: ActionName.EDOCS_EMAIL_CONFIRMATION,
          type: ElementType.CHECKBOX,
          error: Errors.MISSING,
        },
      });
    }
    if (consentIsGiven) {
      setConsent([]);
      setConsentError('');

      const fetch = async () => {
        await updateEDocsCorrespondence();
      };

      fetch()
        .then(() => {
          setSaveEventTriggered(false);
          trackingEventWrapper(appState, globalEventsContext, {
            pageName: PageName.DASHBOARD,
            interaction: Interaction.CLICK,
            element: {
              form: FormName.EDOCS_MODAL,
              name: ActionName.SAVE_EDOCS,
              type: ElementType.BUTTON,
              subType: SubType.SUBMIT,
            },
          });
        })
        .catch(() => {
          setSaveEventTriggered(false);
          setIsError(true);
        });
    }
  };

  const handleSwitchButtonClick = () => {
    trackingEventWrapper(appState, globalEventsContext, {
      pageName: PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        form: FormName.EDOCS_MODAL,
        name: ActionName.SWITCH_POLICIES_TO_EDOCS,
        type: ElementType.BUTTON,
      },
    });
    eDocProps?.modalCloseHandler?.();
    navigate('/profile/policy-correspondence-preferences');
  };

  const EligiblePoliciesNote = () => (
    <div className="w-full">
      <button 
        onClick={toggleNote} 
        aria-expanded={isNoteExpanded} 
        aria-controls="eligiblePoliciesNote"
        className="w-full"
      >
        <div className="text-base text-center mx-14 p-3.5">
          <span className={`text-sm text-gray-600 ${!isNoteExpanded ? 'underline' : ''}`}>
            {!isNoteExpanded && t('pages.eDocsConversionView.readNote')}
          </span>
          {!isNoteExpanded && <i className="i-plus-circle text-gray-500 text-lg" aria-hidden="true" />}
        </div>
      </button>
      {isNoteExpanded && (
        <>
          <div id="eligiblePoliciesNote" className="text-gray-600 leading-relaxed px-4">
            <p className="font-medium">{t('pages.eDocsConversionView.noteOnEligiblePoliciesTitle')}</p>
            <p className="font-normal">{t('pages.eDocsConversionView.noteOnEligiblePolicies')}</p>
            <button onClick={toggleNote} className="mt-4 flex items-center text-sm text-gray-600 w-full">
              <div className="flex text-base text-center mx-24">
                <p className="underline">{t('pages.eDocsConversionView.showLess')}</p>
                <i className="i-minus-circle text-gray-500 text-lg self-center px-1" aria-hidden="true" />
              </div>
            </button>
          </div>
        </>
      )}
    </div>
  );

  const mainContent = () => (
    <div id="edocs-conversion-view" className="w-full max-w-2xl mx-auto">
      <div className="flex flex-col items-center mb-6">
        <img src={eDocsImage} alt="eDocs conversion image" className="w-72 h-64" />
        <p className="text-2xl font-semibold text-center mt-4">
          {t('pages.eDocsConversionView.bannerText')}
        </p>
      </div>
      
      {/* Tailwind Card */}
      <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
        <div className="text-base text-gray-700 mb-6">
          {t('pages.eDocsConversionView.bodyText')}
        </div>
        
        <div className="mb-2 text-sm font-medium">
          {t('pages.eDocsConversionView.inputLabelText')}
        </div>
        
        <Input
          id="input-email"
          datatest-id="input-email"
          className="w-full mb-6"
          value={eDocProps.primaryEmail}
          placeholder="Email address"
          onChange={noop}
          disabled
        />
        
        <div className="space-y-4">
          <Checkbox
            id="edocsConsent"
            name="edocsConsent"
            aria-label="edocsConsent"
            value={consent}
            variant="block"
            onChange={handleConsent}
            options={[
              {
                label: <p>{t('pages.eDocsConversionView.checkboxLabelText')}</p>,
                value: VALUE_EDOC_CONSENT,
              },
            ]}
            error={!!consentError}
          />
          {!!consentError && (
            <Message variant="error" className="mt-2">
              {consentError}
            </Message>
          )}
          <EligiblePoliciesNote />
        </div>
      </div>
      
      <div className="flex flex-col items-center gap-4">
        <Button 
          data-testid="save" 
          variant="primary" 
          onClick={saveChangesHandler}
          className="w-full max-w-md"
        >
          {t('pages.eDocsConversionView.saveChangesButton')}
        </Button>
        
        <Link 
          data-testid="policies-to-switch-button"
          onClick={handleSwitchButtonClick}
          className="text-blue-600 hover:text-blue-700 underline text-center"
        >
          {t('pages.eDocsConversionView.choosePoliciesButton')}
        </Link>
      </div>
    </div>
  );

  if (isLoading)
    return (
      <div className="flex flex-col items-center justify-center p-8">
        <Spinner id="basicSpinner" data-testid="testId" className="mb-4" />
        <p className="text-gray-600">{t('pages.eDocsConversionView.loaderText')}</p>
      </div>
    );

  if (error || isError) {
    return <div className="text-red-600 p-4">{t('pages.eDocsConversionView.errorText')}</div>;
  }

  return mainContent();
};

export default withGlobalEvents<ChromaProps & EDocsConversionProps>(withChroma(EDocsConversionView), {
  componentName: 'modal-edocs',
  ...moduleInfo,
});
