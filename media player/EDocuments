import { screen, fireEvent } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import React from 'react';
import { render } from '../../../../test-utils/renderWithProviders';
import EDocsSection from './EDocsSection';
import { AppContext } from '../../../AppContext';

// Mock the lazy-loaded component
jest.mock('@iag/policy-correspondence-mfe/OnboardingModuleEDocsConversion', () => ({
  __esModule: true,
  default: () => <div data-testid="mock-edocs-conversion">Mock EDocs Conversion</div>
}));

// Mock the Spinner component
jest.mock('@iag/chroma-react-ui.spinner', () => ({
  Spinner: () => <div data-testid="mock-spinner">Loading...</div>
}));

const mockSetIsEDocsRequestComplete = jest.fn();
const mockSetIsResponseLoading = jest.fn();
const mockHandleSettingLink = jest.fn();

const defaultProps = {
  brand: {
    id: 'test-brand',
    name: 'Test Brand'
  },
  partyId: 'test-party-id',
  primaryEmail: 'test@example.com',
  eDocsStatus: false,
  handleSettingLink: mockHandleSettingLink,
  setIsEDocsRequestComplete: mockSetIsEDocsRequestComplete,
  setIsResponseLoading: mockSetIsResponseLoading,
};

const mockAppContext = {
  appState: {
    someState: 'value'
  }
};

describe('EDocsSection', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <AppContext.Provider value={mockAppContext}>
        <EDocsSection {...defaultProps} />
      </AppContext.Provider>
    );
    
    expect(screen.getByTestId('mock-edocs-conversion')).toBeInTheDocument();
  });

  it('handles save edocs event correctly', () => {
    render(
      <AppContext.Provider value={mockAppContext}>
        <EDocsSection {...defaultProps} />
      </AppContext.Provider>
    );

    // Simulate successful save event
    act(() => {
      window.dispatchEvent(
        new CustomEvent('policy_corres_mgmt_mfe:save_edocs', {
          detail: { status: true, loadingStatus: false }
        })
      );
    });

    expect(mockSetIsResponseLoading).toHaveBeenCalledWith(false);
    expect(mockSetIsEDocsRequestComplete).toHaveBeenCalledWith(true);
  });

  it('handles save edocs event with loading state', () => {
    render(
      <AppContext.Provider value={mockAppContext}>
        <EDocsSection {...defaultProps} />
      </AppContext.Provider>
    );

    // Simulate loading state
    act(() => {
      window.dispatchEvent(
        new CustomEvent('policy_corres_mgmt_mfe:save_edocs', {
          detail: { status: true, loadingStatus: true }
        })
      );
    });

    expect(mockSetIsResponseLoading).toHaveBeenCalledWith(true);
    expect(mockSetIsEDocsRequestComplete).toHaveBeenCalledWith(false);
  });

  it('handles save edocs event with false status', () => {
    render(
      <AppContext.Provider value={mockAppContext}>
        <EDocsSection {...defaultProps} />
      </AppContext.Provider>
    );

    // Simulate failed save event
    act(() => {
      window.dispatchEvent(
        new CustomEvent('policy_corres_mgmt_mfe:save_edocs', {
          detail: { status: false, loadingStatus: false }
        })
      );
    });

    expect(mockSetIsResponseLoading).toHaveBeenCalledWith(false);
    expect(mockSetIsEDocsRequestComplete).toHaveBeenCalledWith(true);
  });

  it('removes event listener on unmount', () => {
    const { unmount } = render(
      <AppContext.Provider value={mockAppContext}>
        <EDocsSection {...defaultProps} />
      </AppContext.Provider>
    );

    const removeEventListenerSpy = jest.spyOn(window, 'removeEventListener');
    
    unmount();

    expect(removeEventListenerSpy).toHaveBeenCalledWith(
      'policy_corres_mgmt_mfe:save_edocs',
      expect.any(Function)
    );
  });

  it('renders with different props', () => {
    const newProps = {
      ...defaultProps,
      eDocsStatus: true,
      primaryEmail: 'different@example.com'
    };

    render(
      <AppContext.Provider value={mockAppContext}>
        <EDocsSection {...newProps} />
      </AppContext.Provider>
    );

    expect(screen.getByTestId('mock-edocs-conversion')).toBeInTheDocument();
  });

  // Test error boundary
  it('renders error boundary when component throws', () => {
    const ErrorComponent = () => {
      throw new Error('Test error');
    };

    jest.mock('@iag/policy-correspondence-mfe/OnboardingModuleEDocsConversion', () => ({
      __esModule: true,
      default: ErrorComponent
    }));

    render(
      <AppContext.Provider value={mockAppContext}>
        <EDocsSection {...defaultProps} />
      </AppContext.Provider>
    );

    // Verify error boundary handling
    expect(screen.queryByTestId('error-boundary')).toBeTruthy();
  });
});
