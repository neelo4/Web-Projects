import { GlobalEventsContext } from '@iag-common/mfe-global-events-context';
import { Button } from '@iag/chroma-react-ui.button';
import { Checkbox, CheckboxProps } from '@iag/chroma-react-ui.checkbox';
import { Input } from '@iag/chroma-react-ui.input';
import { Message } from '@iag/chroma-react-ui.message';
import { Spinner } from '@iag/chroma-react-ui.spinner';
import noop from 'lodash/noop';
import { useContext, useEffect, useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { AppContext } from '../../AppContext';
import eDocsImage from '../../assets/images/eDocs-NRMA.svg';
import { useSaveEDocs } from '../../hooks/useSaveEDocs';
import {
  ActionName,
  ActionValue,
  ElementType,
  Errors,
  FormName,
  Interaction,
  PageName,
  SubType,
} from '../../models/SiteTracking';
import { triggerSaveEDocsEvent } from '../../utils/eDocsUtils';
import { trackingEventWrapper } from '../../utils/trackingEventWrapper';
import styles from './EDocsConversionView.module.css';
import { withGlobalEvents } from '@iag-common/mfe-site-tracking';
import { ChromaProps, moduleInfo, withChroma } from '../../utils';
import { useNavigate } from 'react-router-dom';
import { EDocsConversionProps } from '../../models/EdocsConversion';

const EDocsConversionView = (eDocProps: EDocsConversionProps) => {
  const { t } = useTranslation();
  const [isError, setIsError] = useState<boolean>(false);
  const [isNoteExpanded, setIsNoteExpanded] = useState<boolean>(false);
  const { updateEDocsCorrespondence, response, error, isLoading } = useSaveEDocs(eDocProps);
  const [consent, setConsent] = useState<CheckboxProps['value']>([]);
  const [consentError, setConsentError] = useState('');
  const [saveEventTriggered, setSaveEventTriggered] = useState<boolean>(false);

  const VALUE_EDOC_CONSENT = 'yes';
  const consentIsGiven = useMemo(() => consent.includes(VALUE_EDOC_CONSENT), [consent]);

  const { appState } = useContext(AppContext);
  const globalEventsContext = useContext(GlobalEventsContext);
  const navigate = useNavigate();

  useEffect(() => {
    triggerSaveEDocsEvent(response.status, saveEventTriggered);
  }, [saveEventTriggered]);

  const toggleNote = () => {
    setIsNoteExpanded(!isNoteExpanded);
    trackingEventWrapper(appState, globalEventsContext, {
      pageName: PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        form: FormName.EDOCS_MODAL,
        name: isNoteExpanded ? 'COLLAPSE_NOTE' : 'EXPAND_NOTE',
        type: ElementType.BUTTON,
      },
    });
  };

  const handleConsent = (_: React.ChangeEvent<HTMLInputElement>, value: string[]): void => {
    setConsent(value);
    setConsentError('');

    trackingEventWrapper(appState, globalEventsContext, {
      pageName: PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        form: FormName.EDOCS_MODAL,
        name: ActionName.EDOCS_EMAIL_CONFIRMATION,
        type: ElementType.CHECKBOX,
        value: value.length > 0 ? ActionValue.CHECKED : ActionValue.UNCHECKED,
      },
    });
  };

  const saveChangesHandler = () => {
    setConsentError('');
    setSaveEventTriggered(true);
    if (!consentIsGiven) {
      setConsentError('Select checkbox');
      trackingEventWrapper(appState, globalEventsContext, {
        pageName: PageName.DASHBOARD,
        interaction: Interaction.ERROR,
        element: {
          form: FormName.EDOCS_MODAL,
          name: ActionName.EDOCS_EMAIL_CONFIRMATION,
          type: ElementType.CHECKBOX,
          error: Errors.MISSING,
        },
      });
    }
    if (consentIsGiven) {
      setConsent([]);
      setConsentError('');

      const fetch = async () => {
        await updateEDocsCorrespondence();
      };

      fetch()
        .then(() => {
          setSaveEventTriggered(false);
          trackingEventWrapper(appState, globalEventsContext, {
            pageName: PageName.DASHBOARD,
            interaction: Interaction.CLICK,
            element: {
              form: FormName.EDOCS_MODAL,
              name: ActionName.SAVE_EDOCS,
              type: ElementType.BUTTON,
              subType: SubType.SUBMIT,
            },
          });
        })
        .catch(() => {
          setSaveEventTriggered(false);
          setIsError(true);
        });
    }
  };

  const handleSwitchButtonClick = () => {
    trackingEventWrapper(appState, globalEventsContext, {
      pageName: PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        form: FormName.EDOCS_MODAL,
        name: ActionName.SWITCH_POLICIES_TO_EDOCS,
        type: ElementType.BUTTON,
      },
    });
    eDocProps?.modalCloseHandler?.();
    navigate('/profile/policy-correspondence-preferences');
  };

  const EligiblePoliciesNote = () => (
    <div className={styles.noteContainer}>
      <button
        onClick={toggleNote}
        className={styles.noteToggle}
        aria-expanded={isNoteExpanded}
        aria-controls="eligiblePoliciesNote"
      >
        <span className={styles.noteTitle}>
          {isNoteExpanded 
            ? t('pages.eDocsConversionView.noteOnEligiblePolicies.title')
            : t('pages.eDocsConversionView.noteOnEligiblePolicies.readNote')
          }
        </span>
        <i className={`${!isNoteExpanded ? 'i-plus-circle' : 'i-minus-circle'} ${styles.icon}`} aria-hidden="true" />
      </button>
      {isNoteExpanded && (
        <div id="eligiblePoliciesNote" className={styles.noteContent}>
          {t('pages.eDocsConversionView.noteOnEligiblePolicies.content')}
        </div>
      )}
    </div>
  );

  const mainContent = () => (
    <div id="edocs-conversion-view">
      <div className={styles.flexCenter}>
        <img src={eDocsImage} alt="eDocs conversion image" width="283px" height="256px" />
        <p className={styles.bannerText}>{t('pages.eDocsConversionView.bannerText')}</p>
        <p className={styles.bodyText}>{t('pages.eDocsConversionView.bodyText')}</p>
      </div>
      <div className={styles.inputLabel}>{t('pages.eDocsConversionView.inputLabelText')}</div>
      <Input
        id="input-email"
        datatest-id="input-email"
        className={styles.inputEmail}
        value={eDocProps.primaryEmail}
        placeholder="Email address"
        onChange={noop}
        disabled
      />
      <div className={styles.consent}>
        <Checkbox
          id="edocsConsent"
          name="edocsConsent"
          aria-label="edocsConsent"
          value={consent}
          variant="block"
          onChange={handleConsent}
          options={[
            {
              label: <p>{t('pages.eDocsConversionView.checkboxLabelText')}</p>,
              value: VALUE_EDOC_CONSENT,
            },
          ]}
          error={!!consentError}
        />
        {!!consentError && (
          <Message className={styles.errorOA} variant="error">
            {consentError}
          </Message>
        )}
        <EligiblePoliciesNote />
      </div>
      <Button data-testid="save" variant="primary" className={styles.saveButton} onClick={saveChangesHandler}>
        {t('pages.eDocsConversionView.saveChangesButton')}
      </Button>
      <Button
        data-testid="policies-to-switch-button"
        className={styles.switchButton}
        onClick={handleSwitchButtonClick}
        variant="primaryOutline"
      >
        {t('pages.eDocsConversionView.choosePoliciesButton')}
      </Button>
    </div>
  );

  if (isLoading)
    return (
      <div>
        <Spinner className={styles.edocsSpinner} id="basicSpinner" data-testid="testId" />
        <p className={styles.loaderText}> {t('pages.eDocsConversionView.loaderText')}</p>
      </div>
    );

  if (error || isError) {
    return <div>{t('pages.eDocsConversionView.errorText')}</div>;
  }

  return mainContent();
};

export default withGlobalEvents<ChromaProps & EDocsConversionProps>(withChroma(EDocsConversionView), {
  componentName: 'modal-edocs',
  ...moduleInfo,
});
