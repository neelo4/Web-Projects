import React, { useState } from 'react';
import { ChevronDown, ChevronUp } from 'lucide-react';
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useTranslation } from 'react-i18next';

const EDocsConversionView = () => {
  const { t } = useTranslation();
  const [isNoteExpanded, setIsNoteExpanded] = useState(false);
  const [isError, setIsError] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [consent, setConsent] = useState(false);
  const [consentError, setConsentError] = useState('');

  const ExpandableNote = () => (
    <div className="mt-4 border-t border-gray-200 pt-4">
      <button
        onClick={() => setIsNoteExpanded(!isNoteExpanded)}
        className="w-full flex justify-between items-center bg-transparent p-2 text-gray-700 hover:bg-gray-50 rounded-md transition-colors"
        aria-expanded={isNoteExpanded}
        aria-controls="note-content"
      >
        <span className="font-medium text-sm">{t('pages.eDocsConversionView.noteOnEligiblePolicies.title')}</span>
        {isNoteExpanded ? (
          <ChevronUp className="text-gray-500" size={20} />
        ) : (
          <ChevronDown className="text-gray-500" size={20} />
        )}
      </button>
      
      {isNoteExpanded && (
        <div 
          id="note-content"
          className="mt-2 p-2 text-sm text-gray-600 leading-relaxed animate-fadeIn"
        >
          {t('pages.eDocsConversionView.noteOnEligiblePolicies.content')}
        </div>
      )}
    </div>
  );

  // Rest of your component code remains the same...
  
  return (
    <div className="p-4 max-w-md mx-auto">
      {/* Your existing JSX with t() translations */}
      <ExpandableNote />
    </div>
  );
};

export default EDocsConversionView;
