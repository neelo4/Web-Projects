/* eslint-disable react/prop-types */
import { GlobalEventsContext } from '@iag-common/mfe-global-events-context';
import { Icon } from '@iag/chroma-react-ui.icon';
import { Button } from '@iag/chroma-react-ui.button';
import { Link } from '@iag/chroma-react-ui.link';
import { Checkbox, CheckboxProps } from '@iag/chroma-react-ui.checkbox';
import { Input } from '@iag/chroma-react-ui.input';
import { Message } from '@iag/chroma-react-ui.message';
import { Spinner } from '@iag/chroma-react-ui.spinner';
import noop from 'lodash/noop';
import { useContext, useEffect, useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { AppContext } from '../../AppContext';
import eDocsImage from '../../assets/images/eDoc_image.svg';
import { useSaveEDocs } from '../../hooks/useSaveEDocs';
import {
  ActionName,
  ActionValue,
  ElementType,
  Errors,
  FormName,
  Interaction,
  PageName,
  SubType,
} from '../../models/SiteTracking';
import { triggerSaveEDocsEvent } from '../../utils/eDocsUtils';
import { trackingEventWrapper } from '../../utils/trackingEventWrapper';
import styles from './EDocsConversionView.module.css';
import { withGlobalEvents } from '@iag-common/mfe-site-tracking';
import { ChromaProps, moduleInfo, withChroma } from '../../utils';
import { useNavigate } from 'react-router-dom';
import { EDocsConversionProps } from '../../models/EdocsConversion';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line react/prop-types
const EDocsConversionView = (eDocProps: EDocsConversionProps) => {
  const { t } = useTranslation();

  const [isError, setIsError] = useState<boolean>(false);

  const { updateEDocsCorrespondence, response, error, isLoading } = useSaveEDocs(eDocProps);

  const [consent, setConsent] = useState<CheckboxProps['value']>([]);
  const [consentError, setConsentError] = useState('');

  const [saveEventTriggered, setSaveEventTriggered] = useState<boolean>(false);
  const [isNoteExpanded, setIsNoteExpanded] = useState<boolean>(false);
  // eDoc checkbox value
  const VALUE_EDOC_CONSENT = 'yes';
  const consentIsGiven = useMemo(() => consent.includes(VALUE_EDOC_CONSENT), [consent]);

  const { appState } = useContext(AppContext);
  const globalEventsContext = useContext(GlobalEventsContext);
  const navigate = useNavigate();
  const toggleNote = () => {
    setIsNoteExpanded(!isNoteExpanded);
  };

  useEffect(() => {
    triggerSaveEDocsEvent(response.status, saveEventTriggered);
  }, [saveEventTriggered]);

  const handleConsent = (_: React.ChangeEvent<HTMLInputElement>, value: string[]): void => {
    setConsent(value);
    setConsentError('');

    trackingEventWrapper(appState, globalEventsContext, {
      pageName: PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        form: FormName.EDOCS_MODAL,
        name: ActionName.EDOCS_EMAIL_CONFIRMATION,
        type: ElementType.CHECKBOX,
        value: value.length > 0 ? ActionValue.CHECKED : ActionValue.UNCHECKED,
      },
    });
  };

  const saveChangesHandler = () => {
    // Reset error before validation
    setConsentError('');
    setSaveEventTriggered(true);
    if (!consentIsGiven) {
      setConsentError('Select checkbox');
      trackingEventWrapper(appState, globalEventsContext, {
        pageName: PageName.DASHBOARD,
        interaction: Interaction.ERROR,
        element: {
          form: FormName.EDOCS_MODAL,
          name: ActionName.EDOCS_EMAIL_CONFIRMATION,
          type: ElementType.CHECKBOX,
          error: Errors.MISSING,
        },
      });
    }
    if (consentIsGiven) {
      setConsent([]);
      setConsentError('');

      const fetch = async () => {
        await updateEDocsCorrespondence();
      };

      fetch()
        .then(() => {
          setSaveEventTriggered(false);
          trackingEventWrapper(appState, globalEventsContext, {
            pageName: PageName.DASHBOARD,
            interaction: Interaction.CLICK,
            element: {
              form: FormName.EDOCS_MODAL,
              name: ActionName.SAVE_EDOCS,
              type: ElementType.BUTTON,
              subType: SubType.SUBMIT,
            },
          });
        })
        .catch(() => {
          setSaveEventTriggered(false);
          setIsError(true);
        });
    }
  };

  const handleSwitchButtonClick = () => {
    trackingEventWrapper(appState, globalEventsContext, {
      pageName: PageName.DASHBOARD,
      interaction: Interaction.CLICK,
      element: {
        form: FormName.EDOCS_MODAL,
        name: ActionName.SWITCH_POLICIES_TO_EDOCS,
        type: ElementType.BUTTON,
      },
    });
    eDocProps?.modalCloseHandler?.();
    navigate('/profile/policy-correspondence-preferences');
  };

  const mainContent = () => (
    <div id="edocs-conversion-view" className="w-full p-px m-px">
      <div className={styles.flexCenter}>
        <img src={eDocsImage} alt="eDocs conversion image" width="200px" height="200px" className="m-2 p-2" />
        <p className={styles.bannerText}>{t('pages.eDocsConversionView.bannerText')}</p>
      </div>
      {/* Card wrapper */}
      <div className="bg-white rounded-500 shadow-xl m-5 border border-neutral">
        <div className="p-5">
          <p className={styles.bodyText}>{t('pages.eDocsConversionView.bodyText')}</p>

          <Input
            id="input-email"
            data-testid="input-email"
            className={styles.inputEmail}
            value={eDocProps.primaryEmail}
            placeholder="Email address"
            onChange={noop}
            disabled
          />
          <div className={styles.consent}>
            <Checkbox
              id="edocsConsent"
              name="edocsConsent"
              aria-label="edocsConsent"
              value={consent}
              variant="block"
              onChange={handleConsent}
              options={[
                {
                  label: <p>{t('pages.eDocsConversionView.checkboxLabelText')}</p>,
                  value: VALUE_EDOC_CONSENT,
                },
              ]}
              error={!!consentError}
            />
            {!!consentError && (
              <Message className={styles.errorOA} variant="error">
                {consentError}
              </Message>
            )}
            <div className="w-full">
              <p className="mb-1">Note: applies to eligible policies only.</p>
              <Link data-testid="read-more-note-link" onClick={toggleNote}>
                {!isNoteExpanded && (
                  <span className={styles.bodyDetails2}>
                    {t('pages.eDocsConversionView.readNote')}{' '}
                    <Icon className={`i-plus-circle self-center p-1 ${styles.readIcon}`}></Icon>
                  </span>
                )}
              </Link>
              {isNoteExpanded && (
                <>
                  <div id="eligiblePoliciesNote" className="text-gray-600 leading-relaxed">
                    <p className="font-normal">
                      {t('pages.eDocsConversionView.noteOnEligiblePolicies')}{' '}
                      <Link href={`tel:${t('constants.phoneNumber')}`} data-testid="contact-us-policy-correspondence">
                        <span className={styles.bodyDetails2}>
                          {t('pages.onboardingEDocsConversionView.contactUsLink1')}
                        </span>
                      </Link>{' '}
                      .
                    </p>
                    <p className={styles.bodyDetails2}>
                      <Link data-test-id="show-less-note-link" onClick={toggleNote}>
                        <span className={styles.bodyDetails2}>
                          {t('pages.eDocsConversionView.showLess')}{' '}
                          <Icon className={`i-minus-circle self-center p-1 ${styles.readIcon}`}></Icon>
                        </span>
                      </Link>
                    </p>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      </div>
      <Button data-testid="save" variant="primary" className={styles.saveButton} onClick={saveChangesHandler}>
        {t('pages.eDocsConversionView.saveChangesButton')}
      </Button>
      <Link data-testid="policies-to-switch-button" onClick={handleSwitchButtonClick}>
        <span className={styles.switchButton}>{t('pages.eDocsConversionView.choosePoliciesButton')}</span>
      </Link>{' '}
    </div>
  );

  if (isLoading)
    return (
      <div>
        <Spinner className={styles.edocsSpinner} id="basicSpinner" data-testid="testId" />
        <p className={styles.loaderText}> {t('pages.eDocsConversionView.loaderText')}</p>
      </div>
    );

  if (error || isError) {
    return <div>{t('pages.eDocsConversionView.errorText')}</div>;
  }

  return mainContent();
};

export default withGlobalEvents<ChromaProps & EDocsConversionProps>(withChroma(EDocsConversionView), {
  componentName: 'modal-edocs',
  ...moduleInfo,
});
