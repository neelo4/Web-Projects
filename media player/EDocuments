import { screen } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import React from 'react';
import { render } from '../../../../test-utils/renderWithProviders';
import EDocsSection from './EDocsSection';
import { AppContext } from '../../../AppContext';

// Define proper types
interface AppState {
  someState: string;
}

interface Brand {
  id: string;
  name: string;
  // Add any other required brand properties
}

// Mock AppContext with proper types
const mockAppContext = {
  appState: {
    someState: 'value'
  } as AppState,
  setAppState: jest.fn() as jest.Mock<void, [AppState | ((prevState: AppState) => AppState)]>
};

// Mock the lazy-loaded component
jest.mock('@iag/policy-correspondence-mfe/OnboardingModuleEDocsConversion', () => ({
  __esModule: true,
  default: () => <div data-testid="mock-edocs-conversion">Mock EDocs Conversion</div>
}));

// Mock the Spinner component
jest.mock('@iag/chroma-react-ui.spinner', () => ({
  Spinner: () => <div data-testid="mock-spinner">Loading...</div>
}));

const mockSetIsEDocsRequestComplete = jest.fn();
const mockSetIsResponseLoading = jest.fn();
const mockHandleSettingLink = jest.fn();

// Define properly typed default props
const defaultProps = {
  brand: {
    id: 'test-brand',
    name: 'Test Brand'
  } as Brand,
  partyId: 'test-party-id',
  primaryEmail: 'test@example.com',
  eDocsStatus: false,
  handleSettingLink: mockHandleSettingLink,
  setIsEDocsRequestComplete: mockSetIsEDocsRequestComplete,
  setIsResponseLoading: mockSetIsResponseLoading,
};

describe('EDocsSection', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <AppContext.Provider value={mockAppContext}>
        <EDocsSection {...defaultProps} />
      </AppContext.Provider>
    );
    
    expect(screen.getByTestId('mock-edocs-conversion')).toBeInTheDocument();
  });

  it('handles save edocs event correctly', () => {
    render(
      <AppContext.Provider value={mockAppContext}>
        <EDocsSection {...defaultProps} />
      </AppContext.Provider>
    );

    act(() => {
      window.dispatchEvent(
        new CustomEvent('policy_corres_mgmt_mfe:save_edocs', {
          detail: { status: true, loadingStatus: false }
        })
      );
    });

    expect(mockSetIsResponseLoading).toHaveBeenCalledWith(false);
    expect(mockSetIsEDocsRequestComplete).toHaveBeenCalledWith(true);
  });

  it('renders with different props', () => {
    const newProps = {
      ...defaultProps,
      eDocsStatus: true,
      primaryEmail: 'different@example.com'
    };

    render(
      <AppContext.Provider value={mockAppContext}>
        <EDocsSection {...newProps} />
      </AppContext.Provider>
    );

    expect(screen.getByTestId('mock-edocs-conversion')).toBeInTheDocument();
  });

  // Test AppContext interactions
  it('uses AppContext correctly', () => {
    const customContext = {
      ...mockAppContext,
      appState: {
        someState: 'custom-value'
      } as AppState
    };

    render(
      <AppContext.Provider value={customContext}>
        <EDocsSection {...defaultProps} />
      </AppContext.Provider>
    );

    // Add assertions for context usage
    expect(screen.getByTestId('mock-edocs-conversion')).toBeInTheDocument();
  });
});
