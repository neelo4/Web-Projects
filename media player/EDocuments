// EDocsSection.tsx
import { BrandDataProps, connectIagBrand } from '@iag-common/iag-brand-context';
import { GlobalEventsContext } from '@iag-common/mfe-global-events-context';
import { Spinner } from '@iag/chroma-react-ui.spinner';
import React, { lazy, Suspense, useContext, useEffect, useState } from 'react';
import ErrorBoundary, { ErrorTypeCode } from '../../../components/ErrorBoundary';
import { Brand } from '../../../models/Brand';
import sessionId from '../../../sessionId';
import { AppContext } from '../../../AppContext';
import { SiteTrackingContext } from '../../../sitetracking/SiteTrackingProvider';
import { trackingEventWrapper } from '../../../sitetracking/TrackingEventWrapper';
import { triggerOnboardingSaveEDocsEvent } from '../../../utils/onboardingModuleUtils';
import {
  ActionName,
  Activities,
  ElementType,
  FormName,
  Interaction,
  PageName,
  TransactionType,
} from '../../../models/SiteTracking';

const OnboardingEDocsConversionRemote = lazy(
  () => import('@iag/policy-correspondence-mfe/OnboardingModuleEDocsConversion'),
);

interface EdocsSectionProps {
  brand: Brand;
  partyId: string;
  primaryEmail: string;
  eDocsStatus: boolean;
  isGeneralOnboarding: boolean;
  isMigrationOnboarding: boolean;
  handleSettingLink: (settingStatus: boolean) => void;
  setIsEDocsRequestComplete: (status: boolean) => void;
  setIsResponseLoading: (status: boolean) => void;
  onSaveComplete: () => void;
}

const EDocsSection: React.FC<BrandDataProps & EdocsSectionProps> = ({
  brand,
  partyId,
  primaryEmail,
  handleSettingLink,
  setIsEDocsRequestComplete,
  setIsResponseLoading,
  eDocsStatus,
  isGeneralOnboarding,
  isMigrationOnboarding,
  onSaveComplete,
}) => {
  const { appState, setAppState } = useContext(AppContext);
  const [isFormStarted, setIsFormStarted] = useState(false);
  const [isEDocsConsentChecked, setIsEDocsConsentChecked] = useState<boolean>(true);
  const trackingEventContext = useContext(SiteTrackingContext);
  const globalEventsContext = useContext(GlobalEventsContext);

  const siteTrackingData = {
    pageName: PageName.ONBOARDING_SETUP,
    globalEventsContext,
  };

  useEffect(() => {
    const handleCheckboxEdocsEvent = (e: CustomEvent<{ status: boolean }>) => {
      if (!isFormStarted) {
        setIsFormStarted(true);
      }
      setIsEDocsConsentChecked(e.detail.status);
    };
    window.addEventListener('policy_corres_mgmt_mfe:checkbox_edocs', handleCheckboxEdocsEvent);
    return () => {
      window.removeEventListener('policy_corres_mgmt_mfe:checkbox_edocs', handleCheckboxEdocsEvent);
    };
  }, []);

  useEffect(() => {
    const handleSaveEdocsEvent = (e: CustomEvent<{ status: boolean; loadingStatus: boolean }>) => {
      const responseStatus = e.detail.status;
      if (responseStatus !== undefined) {
        setIsResponseLoading(e.detail.loadingStatus);
        setIsEDocsRequestComplete(!e.detail.loadingStatus && (responseStatus === true || responseStatus === false));
        setAppState((prevState) => ({
          ...prevState,
          onboardingAndEdocsResult: {
            ...prevState.onboardingAndEdocsResult,
            eDocsResponseStatus: e.detail.status,
          },
        }));

        if (!e.detail.loadingStatus && (responseStatus === true || responseStatus === false)) {
          handleEDocsComplete();
        }
      }
    };
    window.addEventListener('policy_corres_mgmt_mfe:save_edocs', handleSaveEdocsEvent);
    return () => {
      window.removeEventListener('policy_corres_mgmt_mfe:save_edocs', handleSaveEdocsEvent);
    };
  }, []);

  const handleEDocsComplete = () => {
    if (isFormStarted) {
      trackingEventContext.dispatch({
        pageName: PageName.ONBOARDING_SETUP,
        interaction: Interaction.COMPLETE,
        data: {
          transactionComplete: isMigrationOnboarding,
          transactionType: TransactionType.DOOTB_ONBOARDING,
          transactionActivities: isGeneralOnboarding ? Activities.GENERAL_ONBOARDING : Activities.MIGRATION_ONBOARDING,
        },
        element: {
          type: ElementType.FORM,
          name: isGeneralOnboarding ? ActionName.GENERAL_ONBOARDING : ActionName.MIGRATION_ONBOARDING,
        },
      });
      setIsFormStarted(false);
    }
    onSaveComplete();
  };

  const handleSave = () => {
    if (!isEDocsConsentChecked || eDocsStatus) {
      handleEDocsComplete();
    } else {
      triggerOnboardingSaveEDocsEvent(true);
    }
  };

  return (
    <div data-testid="switch-to-edocs-section" className="px-2 py-2 border border-primary-lighter">
      <ErrorBoundary errorType={ErrorTypeCode.EdocsConversion}>
        <Suspense fallback={<Spinner className="left-1/2" />}>
          <OnboardingEDocsConversionRemote
            brand={brand}
            partyId={partyId}
            xIagContext={{ sessionId }}
            primaryEmail={primaryEmail}
            eDocsStatus={eDocsStatus}
            handleSettingLink={handleSettingLink}
          />
        </Suspense>
      </ErrorBoundary>
    </div>
  );
};

export default connectIagBrand()(EDocsSection);

// DigitalSetupPage.tsx (Updated version with removed eDocs logic)
const DigitalSetupPage: React.FC<BrandDataProps & DigitalSetupPage> = ({ tt, handleSubmit }) => {
  const { appState } = useContext(AppContext);
  const onboardingType = appState?.onboardingAndEdocsResult?.onboardingType;
  const eDocsUpdated = appState?.onboardingAndEdocsResult?.eDocsStatus;

  const brand = getBrand() as Brand;
  const partyId = getPartyId();
  const primaryEmail = appState?.email;

  const [isEDocsRequestComplete, setIsEDocsRequestComplete] = useState<boolean>(false);
  const [isResponseLoading, setIsResponseLoading] = useState<boolean>(false);

  const navigate = useNavigate();
  const globalEventsContext = useContext(GlobalEventsContext);
  
  const isGeneralOnboarding = onboardingType === DOOTB_ONBOARDING_TYPE.GENERAL_ONBOARDING;
  const isMigrationOnboarding = onboardingType === DOOTB_ONBOARDING_TYPE.MIGRATION_ONBOARDING;

  const handleSetting = (settingStatus: boolean) => {
    if (settingStatus) {
      trackingEventWrapper({
        pageName: PageName.ONBOARDING_SETUP,
        globalEventsContext,
        details: {
          interaction: Interaction.CLICK,
          transactionComplete: true,
          transactionType: TransactionType.DOOTB_ONBOARDING,
          transactionActivities: isGeneralOnboarding ? ActionName.GENERAL_ONBOARDING : Activities.MIGRATION_ONBOARDING,
          element: {
            form: isGeneralOnboarding ? FormName.GENERAL_ONBOARDING : FormName.MIGRATION_ONBOARDING,
            type: ElementType.LINK,
            name: ActionName.DOOTB_LINK_CLICK,
          },
        },
      });
      exitOnboardingModule();
    }
  };

  const handleEDocsComplete = () => {
    if (isGeneralOnboarding) {
      handleSubmit(DOOTB_GOB_STEPS.NEXT_BEST_ACTION_PAGE);
    } else if (isMigrationOnboarding) {
      exitOnboardingModule();
      navigate('/');
    }
  };

  return (
    <div data-testid="general-digital-setup-page" className="flex flex-col gap-8 pt-4 pr-4 sm:pt-0">
      <div className="flex flex-col gap-3 mt-8 sm:mt-12">
        {isGeneralOnboarding && (
          <p data-testid="step-number" className="text-base sm:text-lg font-medium">
            {tt('onboardingModule.page2Common.step')}
          </p>
        )}
        <h2 data-testid="page-title" className="-mt-2 text-xl sm:text-2xl sm:pb-4 font-medium">
          {tt('onboardingModule.page2Common.title')}
        </h2>
        <p data-testid="page-selection" className="sm:-mt-4 text-base mb-0 font-normal">
          {tt('onboardingModule.page2Common.subTitle')}
        </p>
      </div>

      <DownloadAppSection tt={tt} />

      <EDocsSection
        brand={brand}
        partyId={partyId}
        primaryEmail={primaryEmail}
        eDocsStatus={eDocsUpdated}
        isGeneralOnboarding={isGeneralOnboarding}
        isMigrationOnboarding={isMigrationOnboarding}
        handleSettingLink={handleSetting}
        setIsEDocsRequestComplete={setIsEDocsRequestComplete}
        setIsResponseLoading={setIsResponseLoading}
        onSaveComplete={handleEDocsComplete}
      />

      <div className="flex flex-col flex-wrap gap-8 sm:flex-row">
        {!isResponseLoading ? (
          <Button data-testid="continue-setup-button" variant="primary" className="mt-3 ml-6">
            {eDocsUpdated
              ? `${tt('onboardingModule.page2Common.buttonContinue')}`
              : `${tt('onboardingModule.page2Common.buttonSaveAndContinue')}`}
          </Button>
        ) : (
          <Button variant="primary" id="buttonLoader" className="mt-3 ml-6">
            <Spinner
              id="loading-spinner"
              data-testid="test-loading-spinner"
              variant="inverse"
              className="mr-3"
              width="28"
            />
            {tt('onboardingModule.page2Common.buttonSaving')}
          </Button>
        )}
      </div>
    </div>
  );
};

export default connectIagBrand()(DigitalSetupPage);
