import { screen } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import React from 'react';
import { render } from '../../../../test-utils/renderWithProviders';
import EDocsSection from './EDocsSection';
import { AppContext } from '../../../AppContext';
import { GlobalEventsContext } from '@iag-common/mfe-global-events-context';
import { SiteTrackingContext } from '../../../sitetracking/SiteTrackingProvider';
import { Brand } from '../../../models/Brand';
import { BrandDataProps } from '@iag-common/iag-brand-context';

// Define the correct interface for your AppState
interface AppState {
  email?: string;
  onboardingAndEdocsResult?: {
    onboardingType?: string;
    eDocsStatus?: boolean;
    eDocsResponseStatus?: boolean;
  };
}

// Define the props interface to match your component
interface EdocsSectionProps extends BrandDataProps {
  brand: Brand;
  partyId: string;
  primaryEmail: string;
  eDocsStatus: boolean;
  handleSettingLink: (settingStatus: boolean) => void;
  setIsEDocsRequestComplete: (status: boolean) => void;
  setIsResponseLoading: (status: boolean) => void;
}

// Create strongly typed mock contexts
const mockAppContext = {
  appState: {
    email: 'test@example.com',
    onboardingAndEdocsResult: {
      onboardingType: 'GENERAL_ONBOARDING',
      eDocsStatus: false,
      eDocsResponseStatus: false
    }
  } as AppState,
  setAppState: jest.fn((updater: (prevState: AppState) => AppState) => {
    if (typeof updater === 'function') {
      return updater(mockAppContext.appState);
    }
    return updater;
  })
};

const mockGlobalEventsContext = {
  dispatch: jest.fn()
};

const mockSiteTrackingContext = {
  dispatch: jest.fn()
};

// Mock the required components
jest.mock('@iag/policy-correspondence-mfe/OnboardingModuleEDocsConversion', () => ({
  __esModule: true,
  default: () => <div data-testid="mock-edocs-conversion">Mock EDocs Conversion</div>
}));

jest.mock('@iag/chroma-react-ui.spinner', () => ({
  Spinner: () => <div data-testid="mock-spinner">Loading...</div>
}));

// Mock handlers
const mockSetIsEDocsRequestComplete = jest.fn();
const mockSetIsResponseLoading = jest.fn();
const mockHandleSettingLink = jest.fn();

// Define props with correct typing
const defaultProps: Omit<EdocsSectionProps, keyof BrandDataProps> = {
  brand: {
    id: 'test-brand',
    name: 'Test Brand',
    // Add any other required Brand properties from your Brand type
  } as Brand,
  partyId: 'test-party-id',
  primaryEmail: 'test@example.com',
  eDocsStatus: false,
  handleSettingLink: mockHandleSettingLink,
  setIsEDocsRequestComplete: mockSetIsEDocsRequestComplete,
  setIsResponseLoading: mockSetIsResponseLoading,
};

// Test wrapper component with all required providers
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <GlobalEventsContext.Provider value={mockGlobalEventsContext}>
    <SiteTrackingContext.Provider value={mockSiteTrackingContext}>
      <AppContext.Provider value={mockAppContext}>
        {children}
      </AppContext.Provider>
    </SiteTrackingContext.Provider>
  </GlobalEventsContext.Provider>
);

describe('EDocsSection', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(
      <TestWrapper>
        <EDocsSection
          {...defaultProps}
          tt={(key: string) => key} // Mock the tt function from BrandDataProps
        />
      </TestWrapper>
    );
    
    expect(screen.getByTestId('mock-edocs-conversion')).toBeInTheDocument();
  });

  it('handles save edocs event correctly', () => {
    render(
      <TestWrapper>
        <EDocsSection
          {...defaultProps}
          tt={(key: string) => key}
        />
      </TestWrapper>
    );

    act(() => {
      window.dispatchEvent(
        new CustomEvent('policy_corres_mgmt_mfe:save_edocs', {
          detail: { status: true, loadingStatus: false }
        })
      );
    });

    expect(mockSetIsResponseLoading).toHaveBeenCalledWith(false);
    expect(mockSetIsEDocsRequestComplete).toHaveBeenCalledWith(true);
  });

  it('renders with different props', () => {
    const newProps = {
      ...defaultProps,
      eDocsStatus: true,
      primaryEmail: 'different@example.com'
    };

    render(
      <TestWrapper>
        <EDocsSection
          {...newProps}
          tt={(key: string) => key}
        />
      </TestWrapper>
    );

    expect(screen.getByTestId('mock-edocs-conversion')).toBeInTheDocument();
  });

  it('cleans up event listeners on unmount', () => {
    const { unmount } = render(
      <TestWrapper>
        <EDocsSection
          {...defaultProps}
          tt={(key: string) => key}
        />
      </TestWrapper>
    );

    const removeEventListenerSpy = jest.spyOn(window, 'removeEventListener');
    unmount();

    expect(removeEventListenerSpy).toHaveBeenCalledWith(
      'policy_corres_mgmt_mfe:save_edocs',
      expect.any(Function)
    );
  });
});
