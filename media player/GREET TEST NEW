import React from 'react';
import { render, screen } from '@testing-library/react';
import Greeting from './Greeting';
import { HomeDetailsContext } from '../../pages/HomeContainer';
import { useFeaturesConfig } from './../../features-config';

// Mock the required modules and hooks
jest.mock('@iag-common/iag-brand-context', () => ({
  connectIagBrand: () => (Component: React.ComponentType) => Component,
}));

jest.mock('./../../features-config', () => ({
  FeatureName: {
    HIDE_INDIVIDUAL_DETAILS: 'HIDE_INDIVIDUAL_DETAILS',
    COMPONENT_STYLE_BANNER_BG_COLOR: 'COMPONENT_STYLE_BANNER_BG_COLOR',
    SHOW_CUSTOMER_SINCE_BADGE: 'SHOW_CUSTOMER_SINCE_BADGE',
  },
  useFeaturesConfig: jest.fn(),
}));

const mockTranslations = {
  tt: jest.fn((key) => key),
  tExists: jest.fn(() => true),
};

describe('Greeting Component', () => {
  const defaultContextValue = {
    staffNumber: '',
    preferredName: '',
    firstName: 'John',
    customerSinceDate: '',
  };

  const renderComponent = (contextValue = defaultContextValue) => {
    return render(
      <HomeDetailsContext.Provider value={contextValue}>
        <Greeting {...mockTranslations} />
      </HomeDetailsContext.Provider>
    );
  };

  beforeEach(() => {
    jest.clearAllMocks();
    // Default feature flags
    (useFeaturesConfig as jest.Mock).mockImplementation((featureName) => {
      switch (featureName) {
        case 'HIDE_INDIVIDUAL_DETAILS':
          return false;
        case 'COMPONENT_STYLE_BANNER_BG_COLOR':
          return 'bg-primary';
        case 'SHOW_CUSTOMER_SINCE_BADGE':
          return true;
        default:
          return null;
      }
    });
  });

  describe('Customer Since Badge', () => {
    it('should not display customer since badge when customerSinceDate is empty', () => {
      renderComponent();
      expect(screen.queryByText(/pages.home.customerSinceBadge/)).not.toBeInTheDocument();
    });

    it('should display customer since badge with correct year when valid date is provided', () => {
      const contextValue = {
        ...defaultContextValue,
        customerSinceDate: '2020-01-01',
      };
      renderComponent(contextValue);
      expect(screen.getByText(/pages.home.customerSinceBadge.*2020/)).toBeInTheDocument();
    });

    it('should not display customer since badge when date format is invalid', () => {
      const contextValue = {
        ...defaultContextValue,
        customerSinceDate: '20200101',
      };
      renderComponent(contextValue);
      expect(screen.queryByText(/pages.home.customerSinceBadge/)).not.toBeInTheDocument();
    });

    it('should not display customer since badge when feature flag is disabled', () => {
      (useFeaturesConfig as jest.Mock).mockImplementation((featureName) => 
        featureName === 'SHOW_CUSTOMER_SINCE_BADGE' ? false : true
      );
      const contextValue = {
        ...defaultContextValue,
        customerSinceDate: '2020-01-01',
      };
      renderComponent(contextValue);
      expect(screen.queryByText(/pages.home.customerSinceBadge/)).not.toBeInTheDocument();
    });

    it('should not display customer since badge when year is invalid', () => {
      const contextValue = {
        ...defaultContextValue,
        customerSinceDate: 'invalid-01-01',
      };
      renderComponent(contextValue);
      expect(screen.queryByText(/pages.home.customerSinceBadge/)).not.toBeInTheDocument();
    });
  });

  describe('Staff Badge', () => {
    it('should display staff badge when staffNumber is present', () => {
      const contextValue = {
        ...defaultContextValue,
        staffNumber: '12345',
      };
      renderComponent(contextValue);
      expect(screen.getByText('pages.home.staffBadge')).toBeInTheDocument();
    });

    it('should not display staff badge when staffNumber is empty', () => {
      renderComponent();
      expect(screen.queryByText('pages.home.staffBadge')).not.toBeInTheDocument();
    });
  });

  describe('Greeting Message', () => {
    it('should display preferred name when available', () => {
      const contextValue = {
        ...defaultContextValue,
        preferredName: 'Johnny',
        firstName: 'John',
      };
      renderComponent(contextValue);
      expect(screen.getByTestId('page-title')).toHaveTextContent(/Johnny$/);
    });

    it('should display firstName when preferred name is empty', () => {
      const contextValue = {
        ...defaultContextValue,
        preferredName: '',
        firstName: 'John',
      };
      renderComponent(contextValue);
      expect(screen.getByTestId('page-title')).toHaveTextContent(/John$/);
    });

    it('should not display name when HIDE_INDIVIDUAL_DETAILS is enabled', () => {
      (useFeaturesConfig as jest.Mock).mockImplementation((featureName) => 
        featureName === 'HIDE_INDIVIDUAL_DETAILS' ? true : false
      );
      renderComponent();
      expect(screen.getByTestId('page-title')).toHaveTextContent('pages.home.greeting');
    });
  });

  describe('Styling', () => {
    it('should apply correct background color from feature flag', () => {
      const { container } = renderComponent();
      expect(container.firstChild).toHaveClass('bg-primary');
    });

    it('should use correct text color when color translation exists', () => {
      renderComponent();
      expect(screen.getByTestId('page-title')).toHaveClass('text-constants.colors.greetingTextColor');
    });

    it('should use banner text color when greeting text color translation does not exist', () => {
      mockTranslations.tExists.mockReturnValue(false);
      renderComponent();
      expect(screen.getByTestId('page-title')).toHaveClass('text-constants.colors.bannerTextColor');
    });
  });
});
