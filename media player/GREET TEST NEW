interface UserData {
  fullName: string;
  firstName: string;
  isStaffMember: boolean;
  email: string;
  policies: PolicySummary[];
  preferredName: string;
  customerSinceDate?: string;
}

describe('Test greeting component for NRMA', () => {
  const policies: PolicySummary[] = [];
  const baseUserData: UserData = {
    fullName: 'Tester',
    firstName: 'Tester',
    isStaffMember: false,
    email: 'jdisney@disney.com.au',
    policies: policies,
    preferredName: '',
    customerSinceDate: undefined
  };

  const featureFlagMocks = {
    SHOW_CUSTOMER_SINCE_BADGE: true,
    COMPONENT_STYLE_BANNER_BG_COLOR: 'bg-white'
  };

  beforeEach(() => {
    jest.clearAllMocks();
    window.__CLIENT_VARS__.brand = Brand.NRMA;
    
    (useFeaturesConfig as jest.Mock).mockImplementation((featureName: keyof typeof featureFlagMocks) => {
      return featureFlagMocks[featureName];
    });
  });

  describe('customerSinceDate badge display conditions', () => {
    test('displays badge when date is valid', () => {
      const userData: UserData = {
        ...baseUserData,
        customerSinceDate: '2020-01-01'
      };

      render(
        <AppContext.Provider value={{ appState: {}, setAppState: jest.fn() }}>
          <HomeDetailsContext.Provider value={userData}>
            <Greeting />
          </HomeDetailsContext.Provider>
        </AppContext.Provider>
      );

      expect(screen.getByText((content) => 
        content.includes('Customer since') && content.includes('2020')
      )).toBeInTheDocument();
    });

    test('does not display badge when date is empty string', () => {
      const userData: UserData = {
        ...baseUserData,
        customerSinceDate: ''
      };

      render(
        <AppContext.Provider value={{ appState: {}, setAppState: jest.fn() }}>
          <HomeDetailsContext.Provider value={userData}>
            <Greeting />
          </HomeDetailsContext.Provider>
        </AppContext.Provider>
      );

      expect(screen.queryByTestId('customer-since-badge')).not.toBeInTheDocument();
    });

    test('does not display badge when date has no hyphen', () => {
      const userData: UserData = {
        ...baseUserData,
        customerSinceDate: '20200101'  // Invalid format - no hyphens
      };

      render(
        <AppContext.Provider value={{ appState: {}, setAppState: jest.fn() }}>
          <HomeDetailsContext.Provider value={userData}>
            <Greeting />
          </HomeDetailsContext.Provider>
        </AppContext.Provider>
      );

      expect(screen.queryByTestId('customer-since-badge')).not.toBeInTheDocument();
    });

    test('does not display badge when year is not 4 digits', () => {
      const userData: UserData = {
        ...baseUserData,
        customerSinceDate: '20-01-01'  // Invalid year format
      };

      render(
        <AppContext.Provider value={{ appState: {}, setAppState: jest.fn() }}>
          <HomeDetailsContext.Provider value={userData}>
            <Greeting />
          </HomeDetailsContext.Provider>
        </AppContext.Provider>
      );

      expect(screen.queryByTestId('customer-since-badge')).not.toBeInTheDocument();
    });

    test('does not display badge when feature flag is false even with valid date', () => {
      const userData: UserData = {
        ...baseUserData,
        customerSinceDate: '2020-01-01'
      };

      // Override feature flag to be false
      (useFeaturesConfig as jest.Mock).mockImplementation((featureName: string) => {
        if (featureName === 'SHOW_CUSTOMER_SINCE_BADGE') return false;
        return featureFlagMocks[featureName];
      });

      render(
        <AppContext.Provider value={{ appState: {}, setAppState: jest.fn() }}>
          <HomeDetailsContext.Provider value={userData}>
            <Greeting />
          </HomeDetailsContext.Provider>
        </AppContext.Provider>
      );

      expect(screen.queryByTestId('customer-since-badge')).not.toBeInTheDocument();
    });

    test('does not display badge when date is undefined', () => {
      const userData: UserData = {
        ...baseUserData,
        customerSinceDate: undefined
      };

      render(
        <AppContext.Provider value={{ appState: {}, setAppState: jest.fn() }}>
          <HomeDetailsContext.Provider value={userData}>
            <Greeting />
          </HomeDetailsContext.Provider>
        </AppContext.Provider>
      );

      expect(screen.queryByTestId('customer-since-badge')).not.toBeInTheDocument();
    });
  });
});
