describe('Test greeting component', () => {
  // ... existing code ...

  const mockTranslations = (key: string) => {
    const translations = {
      'pages.home.greeting': 'Hi',
      'pages.home.customerSinceBadge': 'Customer since',
      'constants.colors.customerSinceBadgeBgColor': 'accent-background',
      'constants.colors.customerSinceBadgeTextColor': 'white'
    };
    return translations[key] || key;
  };

  beforeEach(() => {
    jest.clearAllMocks();
    // Mock all necessary feature flags
    (useFeaturesConfig as jest.Mock).mockImplementation((featureName: string) => {
      switch (featureName) {
        case FeatureName.SHOW_CUSTOMER_SINCE_BADGE:
          return true;
        case FeatureName.HIDE_INDIVIDUAL_DETAILS:
          return false;
        case FeatureName.COMPONENT_STYLE_BANNER_BG_COLOR:
          return 'bg-blue-900';
        default:
          return false;
      }
    });
  });

  test('displays customer since badge', async () => {
    window.__CLIENT_VARS__.brand = Brand.NRMA;
    
    // Mock translations
    jest.spyOn(require('@iag-common/iag-brand-context'), 'connectIagBrand')
      .mockImplementation(() => (Component: any) => (props: any) => (
        <Component
          {...props}
          tt={mockTranslations}
          tExists={() => true}
        />
      ));

    const userData = {
      fullName: 'Tester',
      firstName: 'Tester',
      isStaffMember: false,
      email: 'jdisney@disney.com.au',
      policies: [] as PolicySummary[],
      preferredName: '',
      customerSinceDate: '2023-02-28'
    };

    render(
      <HomeDetailsContext.Provider value={userData}>
        <Greeting />
      </HomeDetailsContext.Provider>
    );

    // Use regex to find partial text match
    const badgeElement = screen.getByText(/Customer since 2023/i);
    expect(badgeElement).toBeInTheDocument();
  });
});
