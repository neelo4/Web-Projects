// Add these tests inside the existing "Test greeting component" describe block
describe('Test greeting component', () => {
  // ... existing tests remain same ...

  test('handles customer since date display', () => {
    const userData = {
      ...userData,  // Using existing userData
      customerSinceDate: '2023-02-28'
    };
    render(
      <HomeDetailsContext.Provider value={userData}>
        <Greeting />
      </HomeDetailsContext.Provider>
    );
    expect(screen.getByText('Customer since 2023')).toBeInTheDocument();
  });

  test('hides customer since badge when date is undefined', () => {
    const userData = {
      ...userData,
      customerSinceDate: undefined
    };
    render(
      <HomeDetailsContext.Provider value={userData}>
        <Greeting />
      </HomeDetailsContext.Provider>
    );
    expect(screen.queryByText(/Customer since/)).not.toBeInTheDocument();
  });

  test('hides customer since badge when date is empty', () => {
    const userData = {
      ...userData,
      customerSinceDate: ''
    };
    render(
      <HomeDetailsContext.Provider value={userData}>
        <Greeting />
      </HomeDetailsContext.Provider>
    );
    expect(screen.queryByText(/Customer since/)).not.toBeInTheDocument();
  });
});

// Add these tests inside the existing "Test greeting component for STATE" describe block
describe('Test greeting component for STATE', () => {
  // ... existing tests remain same ...

  test('displays both staff and customer since badges when applicable', () => {
    const updatedUserData = {
      ...userData,
      customerSinceDate: '2023-02-28'
    };
    render(
      <HomeDetailsContext.Provider value={updatedUserData}>
        <Greeting />
      </HomeDetailsContext.Provider>,
      { brand: Brand.STATE }
    );
    expect(screen.getByText('Staff')).toBeInTheDocument();
    expect(screen.getByText('Customer since 2023')).toBeInTheDocument();
  });

  test('handles invalid date format', () => {
    const updatedUserData = {
      ...userData,
      customerSinceDate: 'invalid-date'
    };
    render(
      <HomeDetailsContext.Provider value={updatedUserData}>
        <Greeting />
      </HomeDetailsContext.Provider>,
      { brand: Brand.STATE }
    );
    expect(screen.queryByText(/Customer since/)).not.toBeInTheDocument();
  });

  test('respects customer since badge feature flag', () => {
    (useFeaturesConfig as jest.Mock).mockImplementation((featureName: string) => {
      return featureName === 'SHOW_CUSTOMER_SINCE_BADGE' ? false : true;
    });
    const updatedUserData = {
      ...userData,
      customerSinceDate: '2023-02-28'
    };
    render(
      <HomeDetailsContext.Provider value={updatedUserData}>
        <Greeting />
      </HomeDetailsContext.Provider>,
      { brand: Brand.STATE }
    );
    expect(screen.queryByText(/Customer since/)).not.toBeInTheDocument();
  });
});

// Add these tests inside the existing "Test greeting component for WFI" describe block
describe('Test greeting component for WFI', () => {
  // ... existing tests remain same ...

  test('displays customer since badge with WFI branding', () => {
    featureFlagMocks.HIDE_INDIVIDUAL_DETAILS = false;
    const updatedUserData = {
      ...userData,
      customerSinceDate: '2023-02-28'
    };
    render(
      <HomeDetailsContext.Provider value={updatedUserData}>
        <Greeting />
      </HomeDetailsContext.Provider>,
      { brand: Brand.WFI }
    );
    expect(screen.getByText('Customer since 2023')).toBeInTheDocument();
  });
});
