describe('Test greeting component for NRMA with customerSinceDate', () => {
  const policies: PolicySummary[] = [];
  const baseUserData = {
    fullName: 'Tester',
    firstName: 'Tester',
    isStaffMember: false,
    email: 'jdisney@disney.com.au',
    policies: policies,
    preferredName: '',
  };

  const featureFlagMocks = {
    SHOW_CUSTOMER_SINCE_BADGE: true,
    COMPONENT_STYLE_BANNER_BG_COLOR: 'bg-white'
  };

  const mockTranslations = {
    'pages.home.customerSinceBadge': 'Customer since',
    'constants.colors.customerSinceBadgeBgColor': 'blue-500',
    'constants.colors.customerSinceBadgeTextColor': 'white'
  };

  beforeEach(() => {
    jest.clearAllMocks();
    window.__CLIENT_VARS__.brand = Brand.NRMA;
    
    (useFeaturesConfig as jest.Mock).mockImplementation((featureName: keyof typeof featureFlagMocks) => {
      return featureFlagMocks[featureName];
    });
  });

  test('renders customer since badge when customerSinceDate is available', () => {
    const userData = {
      ...baseUserData,
      customerSinceDate: '2020-01-01'
    };

    render(
      <AppContext.Provider value={{ appState: {}, setAppState: jest.fn() }}>
        <HomeDetailsContext.Provider value={userData}>
          <Greeting 
            tExists={() => true}
            tt={(key: string) => mockTranslations[key] || key}
          />
        </HomeDetailsContext.Provider>
      </AppContext.Provider>
    );

    // Look for the Badge component containing the text
    const badge = screen.getByTestId('customer-since-badge');
    expect(badge).toBeInTheDocument();
    expect(badge).toHaveTextContent('Customer since 2020');
    expect(screen.getByText('Hi Tester')).toBeInTheDocument();
  });

  test('does not render customer since badge when customerSinceDate is undefined', () => {
    const userData = {
      ...baseUserData,
      customerSinceDate: undefined
    };

    render(
      <AppContext.Provider value={{ appState: {}, setAppState: jest.fn() }}>
        <HomeDetailsContext.Provider value={userData}>
          <Greeting 
            tExists={() => true}
            tt={(key: string) => mockTranslations[key] || key}
          />
        </HomeDetailsContext.Provider>
      </AppContext.Provider>
    );

    expect(screen.queryByTestId('customer-since-badge')).not.toBeInTheDocument();
    expect(screen.getByText('Hi Tester')).toBeInTheDocument();
  });
});
