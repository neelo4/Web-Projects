describe('Test greeting component', () => {
  const policies: PolicySummary[] = [];
  const translations = {
    'pages.home.customerSinceBadge': 'Customer since',
    'pages.home.greeting': 'Hi',
    'constants.colors.customerSinceBadgeBgColor': 'accent-background',
    'constants.colors.customerSinceBadgeTextColor': 'white'
  };

  const featureFlagMocks = {
    HIDE_INDIVIDUAL_DETAILS: false,
    COMPONENT_STYLE_BANNER_BG_COLOR: 'bg-blue-900',
    SHOW_CUSTOMER_SINCE_BADGE: true
  };

  const userData = {
    fullName: 'Tester',
    firstName: 'Tester',
    isStaffMember: false,
    email: 'jdisney@disney.com.au',
    policies: policies,
    preferredName: '',
    customerSinceDate: '2023-02-28'
  };

  const dashboardSuccessAlert: SuccessAlert = {
    status: true,
    heading: 'Your message has been received successfully.',
    appendEmail: true,
    subText: 'One of our team members will get back to you within 3 business days to the following email address: ',
  };

  const setAppState = jest.fn();
  const appState = {
    showEmailSentSuccess: true,
    dashboardSuccessAlert,
    translations  // Add translations to appState
  };

  beforeEach(() => {
    (useFeaturesConfig as jest.Mock).mockImplementation((featureName: keyof typeof featureFlagMocks) => {
      return featureFlagMocks[featureName];
    });
  });

  const renderComponent = () => {
    render(
      <AppContext.Provider value={{ appState, setAppState }}>
        <HomeDetailsContext.Provider value={userData}>
          <Greeting />
        </HomeDetailsContext.Provider>
      </AppContext.Provider>,
    );
  };

  test('displays customer since badge', () => {
    window.__CLIENT_VARS__.brand = Brand.NRMA;
    renderComponent();
    
    expect(screen.getByText((content) => content.includes('Customer since'))).toBeInTheDocument();
  });
});
