import { ApolloClient, ApolloError, ApolloProvider, InMemoryCache } from '@apollo/react-hooks';
import { screen, waitFor } from '@testing-library/react';
import React from 'react';
import { render } from '../../test-utils/renderWithProviders';
import { useFeaturesConfig } from '../features-config';
import useDashboardDetails from '../hooks/api/useDashboardDetails';
import useGetOnboardingAndEdocsDetails from '../hooks/api/useGetOnboardingAndEdocsDetails';
import { SiteTrackingContext } from '../sitetracking/SiteTrackingProvider';
import { showDootbOnboardingModule } from '../utils/onboardingModuleUtils';
import HomeContainer, { HomeDetailsContext, OnboardingAndEdocsContext } from './HomeContainer';
import { AppContext } from '../AppContext';
import useAuth from '@iag/identity/useAuth';
import useBrowserDetect from '../hooks/useBrowserDetect';

// Setup mocks
window.__webpack_require__ = {
  l: jest.fn(),
};

const mockClient = new ApolloClient({
  cache: new InMemoryCache(),
  defaultOptions: {
    watchQuery: {
      fetchPolicy: 'no-cache',
      errorPolicy: 'all',
    },
    query: {
      fetchPolicy: 'no-cache',
      errorPolicy: 'all',
    },
  },
});

// Mock implementations
jest.mock('../iagBrandStore');
jest.mock('../hooks/api/useDashboardDetails');
jest.mock('../hooks/api/useGetOnboardingAndEdocsDetails');
jest.mock('../hooks/useBrowserDetect');
jest.mock('@iag/identity/useAuth');
jest.mock('../utils/onboardingModuleUtils');

const mockSiteTrackingContext = {
  setElement: jest.fn(),
  pageview: jest.fn(),
  pageviewImmediately: jest.fn(),
  dispatch: jest.fn(),
  detail: {},
};

const mockAppContext = {
  appState: {
    isOnboardingAndEdocsCallCompleted: true,
  },
  setAppState: jest.fn(),
};

const userData = {
  fullName: 'Tester',
  firstName: 'Tester',
  isStaffMember: false,
  email: 'test@test.com',
  preferredName: 'test',
  staffNumber: 'test',
};

const onboardingData = {
  isOnboardingComplete: false,
  isEdocsComplete: false,
};

const scrollIntoViewMock = jest.fn();

beforeAll(() => {
  window.HTMLElement.prototype.scrollIntoView = scrollIntoViewMock;
});

beforeEach(() => {
  jest.clearAllMocks();
  (useBrowserDetect as jest.Mock).mockImplementation(() => ({ isMobileApp: false }));
  (useAuth as jest.Mock).mockImplementation(() => ({ isAuthenticated: true }));
  (showDootbOnboardingModule as jest.Mock).mockReturnValue(false);
});

const renderHomeContainer = (appContextValue = mockAppContext) => {
  return render(
    <AppContext.Provider value={appContextValue}>
      <ApolloProvider client={mockClient}>
        <SiteTrackingContext.Provider value={mockSiteTrackingContext}>
          <HomeContainer />
        </SiteTrackingContext.Provider>
      </ApolloProvider>
    </AppContext.Provider>
  );
};

describe('HomeContainer', () => {
  test('renders StandardLoader when onboarding and edocs call is not completed', () => {
    const mockAppContextIncomplete = {
      appState: {
        isOnboardingAndEdocsCallCompleted: false,
      },
      setAppState: jest.fn(),
    };

    renderHomeContainer(mockAppContextIncomplete);
    expect(screen.getByTestId('StandardLoader')).toBeInTheDocument();
  });

  test('renders OnboardingModule when showDootbOnboardingModule returns true', () => {
    (showDootbOnboardingModule as jest.Mock).mockReturnValue(true);
    (useDashboardDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: userData,
    });
    (useGetOnboardingAndEdocsDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: onboardingData,
    });

    renderHomeContainer();
    expect(screen.getByTestId('onboarding-module')).toBeInTheDocument();
  });

  test('renders Home component when showDootbOnboardingModule returns false', () => {
    (showDootbOnboardingModule as jest.Mock).mockReturnValue(false);
    (useDashboardDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: userData,
    });
    (useGetOnboardingAndEdocsDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: onboardingData,
    });

    renderHomeContainer();
    expect(screen.getByTestId('home')).toBeInTheDocument();
  });

  test('handles authentication error in dashboard details', () => {
    (useDashboardDetails as jest.Mock).mockReturnValue({
      loading: false,
      hasAuthenticationError: true,
    });
    (useGetOnboardingAndEdocsDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: onboardingData,
    });

    renderHomeContainer();
    expect(screen.getByTestId('TechnicalError')).toBeInTheDocument();
  });

  test('handles authentication error in onboarding details', () => {
    (useDashboardDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: userData,
    });
    (useGetOnboardingAndEdocsDetails as jest.Mock).mockReturnValue({
      loading: false,
      hasAuthenticationError: true,
    });

    renderHomeContainer();
    expect(screen.getByTestId('TechnicalError')).toBeInTheDocument();
  });

  test('handles loading state for both data fetches', () => {
    (useDashboardDetails as jest.Mock).mockReturnValue({
      loading: true,
    });
    (useGetOnboardingAndEdocsDetails as jest.Mock).mockReturnValue({
      loading: true,
    });

    renderHomeContainer();
    expect(screen.getByTestId('DashboardLoader')).toBeInTheDocument();
  });

  test('handles error state for dashboard details', () => {
    (useDashboardDetails as jest.Mock).mockReturnValue({
      loading: false,
      error: new ApolloError({ networkError: new Error('Network error') }),
    });
    (useGetOnboardingAndEdocsDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: onboardingData,
    });

    renderHomeContainer();
    expect(screen.getByTestId('TechnicalError')).toBeInTheDocument();
  });

  test('handles error state for onboarding details', () => {
    (useDashboardDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: userData,
    });
    (useGetOnboardingAndEdocsDetails as jest.Mock).mockReturnValue({
      loading: false,
      error: new ApolloError({ networkError: new Error('Network error') }),
    });

    renderHomeContainer();
    expect(screen.getByTestId('TechnicalError')).toBeInTheDocument();
  });

  test('checks mobile app detection', () => {
    (useBrowserDetect as jest.Mock).mockImplementation(() => ({ isMobileApp: true }));
    (showDootbOnboardingModule as jest.Mock).mockReturnValue(false);
    (useDashboardDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: userData,
    });
    (useGetOnboardingAndEdocsDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: onboardingData,
    });

    renderHomeContainer();
    expect(useBrowserDetect).toHaveBeenCalled();
    expect(screen.getByTestId('home')).toBeInTheDocument();
  });

  test('checks authentication status', () => {
    (useAuth as jest.Mock).mockImplementation(() => ({ isAuthenticated: false }));
    (showDootbOnboardingModule as jest.Mock).mockReturnValue(false);
    (useDashboardDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: userData,
    });
    (useGetOnboardingAndEdocsDetails as jest.Mock).mockReturnValue({
      loading: false,
      data: onboardingData,
    });

    renderHomeContainer();
    expect(useAuth).toHaveBeenCalled();
    expect(screen.getByTestId('home')).toBeInTheDocument();
  });
});
