import { ApolloClient, ApolloError, ApolloProvider, InMemoryCache } from '@apollo/react-hooks';
import { screen } from '@testing-library/react';
import React from 'react';
import { render } from '../../test-utils/renderWithProviders';
import { useFeaturesConfig } from '../features-config';
import useDashboardDetails from '../hooks/api/useDashboardDetails';
import { SiteTrackingContext } from '../sitetracking/SiteTrackingProvider';
import { showDootbOnboardingModule } from '../utils/onboardingModuleUtils';
import HomeContainer, { HomeDetailsContext } from './HomeContainer';
import { AppContext } from '../AppContext';
import { DOOTB_ONBOARDING_TYPE } from '../components/shared/Constants';
import { OnboardingAndEdocsStatus } from '../models/OnboardingModule';
import { SuccessAlert } from '../models/SuccessAlert';

// Define the proper AppState type to match your application's type
interface AppState {
  isOnboardingAndEdocsCallCompleted: boolean;
  firstName: string;
  preferredName: string;
  brand?: string;
  canViewBusinessUsage?: boolean;
  canAccessPolicyDetailsURL?: boolean;
  showEmailSentSuccess?: boolean;
  dashboardSuccessAlert?: SuccessAlert;
  dashboardHistory?: boolean;
  onboardingAndEdocsResult?: OnboardingAndEdocsStatus;
}

const mockAppState: AppState = {
  isOnboardingAndEdocsCallCompleted: true,
  firstName: 'Tester',
  preferredName: 'Test',
  brand: 'nrma',
  canViewBusinessUsage: false,
  canAccessPolicyDetailsURL: true,
  showEmailSentSuccess: false,
  dashboardSuccessAlert: undefined,
  dashboardHistory: false,
  onboardingAndEdocsResult: {
    showOnboarding: true,
    isOnboardingComplete: false,
    isEdocsComplete: false,
    onboardingType: DOOTB_ONBOARDING_TYPE.GENERAL_ONBOARDING
  }
};

const mockAppContext = {
  appState: mockAppState,
  setAppState: jest.fn(),
};

// Rest of the imports and mock setup remains the same...

const mockSiteTrackingContext = {
  setElement: jest.fn(),
  pageview: jest.fn(),
  pageviewImmediately: jest.fn(),
  dispatch: jest.fn(),
  detail: {},
};

const userData = {
  fullName: 'Tester',
  firstName: 'Tester',
  isStaffMember: false,
  email: 'jdisney@disney.com.au',
  preferredName: 'test',
  staffNumber: 'test',
};

// Keep existing jest.mock calls...

test('renders success state- showing onboarding module', async () => {
  useHomeDetailsMock.mockReturnValueOnce({
    loading: false,
    hasAuthenticationError: false,
    data: userData,
  });

  (showDootbOnboardingModule as jest.Mock).mockReturnValue(true);

  const mockAppContextValue = {
    appState: mockAppState,
    setAppState: jest.fn(),
  };

  render(
    <AppContext.Provider value={mockAppContextValue}>
      <ApolloProvider client={mockClient}>
        <SiteTrackingContext.Provider value={mockSiteTrackingContext}>
          <HomeDetailsContext.Provider value={userData}>
            <HomeContainer />
          </HomeDetailsContext.Provider>
        </SiteTrackingContext.Provider>
      </ApolloProvider>
    </AppContext.Provider>
  );

  const greeting = screen.getByTestId('onboarding-module-page-greeting');
  expect(greeting).toBeInTheDocument();
});
