import { ApolloClient, ApolloError, ApolloProvider, InMemoryCache } from '@apollo/react-hooks';
import { screen } from '@testing-library/react';
import React from 'react';
import { render } from '../../test-utils/renderWithProviders';
import { useFeaturesConfig } from '../features-config';
import useDashboardDetails from '../hooks/api/useDashboardDetails';
import { SiteTrackingContext } from '../sitetracking/SiteTrackingProvider';
import { showDootbOnboardingModule } from '../utils/onboardingModuleUtils';
import HomeContainer, { HomeDetailsContext } from './HomeContainer';
import { AppContext } from '../AppContext';
import { DOOTB_ONBOARDING_TYPE } from '../components/shared/Constants';

window.__webpack_require__ = {
  l: jest.fn(),
};

const featureFlagMocks = {
  USE_HERITAGE_CLAIM_VIEW_MFE: true,
};

const mockClient = new ApolloClient({
  cache: new InMemoryCache(),
  defaultOptions: {
    watchQuery: {
      fetchPolicy: 'no-cache',
      errorPolicy: 'all',
    },
    query: {
      fetchPolicy: 'no-cache',
      errorPolicy: 'all',
    },
  },
});

const mockSiteTrackingContext = {
  setElement: jest.fn(),
  pageview: jest.fn(),
  pageviewImmediately: jest.fn(),
  dispatch: jest.fn(),
  detail: {},
};

const mockAppState = {
  isOnboardingAndEdocsCallCompleted: true,
  firstName: 'Tester',
  preferredName: 'Test',
  onboardingAndEdocsResult: {
    onboardingType: DOOTB_ONBOARDING_TYPE.GENERAL_ONBOARDING
  }
};

const mockAppContext = {
  appState: mockAppState,
  setAppState: jest.fn(),
};

const userData = {
  fullName: 'Tester',
  firstName: 'Tester',
  isStaffMember: false,
  email: 'jdisney@disney.com.au',
  preferredName: 'test',
  staffNumber: 'test',
};

const useHomeDetailsMock = useDashboardDetails as jest.MockedFunction<typeof useDashboardDetails>;

const scrollIntoViewMock = jest.fn();

jest.mock('../iagBrandStore');
jest.mock('../hooks/api/useDashboardDetails');
jest.mock('../hooks/useBrowserDetect', () => jest.fn(() => ({ isMobileApp: false })));
jest.mock('@iag/identity/useAuth', () => () => ({ isAuthenticated: true }), { virtual: true });
jest.mock('../features-config', () => ({
  useFeaturesConfig: jest.fn(),
  FeatureName: {
    USE_HERITAGE_CLAIM_VIEW_MFE: 'USE_HERITAGE_CLAIM_VIEW_MFE',
  },
}));

jest.mock('../utils/onboardingModuleUtils', () => ({
  showDootbOnboardingModule: jest.fn().mockReturnValue(false),
}));

beforeAll(() => {
  window.HTMLElement.prototype.scrollIntoView = scrollIntoViewMock;
});

beforeEach(() => {
  jest.clearAllMocks();
  (useFeaturesConfig as jest.Mock).mockImplementation((featureName: keyof typeof featureFlagMocks) => {
    return featureFlagMocks[featureName];
  });
});

test('renders success state- showing onboarding module', async () => {
  useHomeDetailsMock.mockReturnValueOnce({
    loading: false,
    hasAuthenticationError: false,
    data: userData,
  });

  (showDootbOnboardingModule as jest.Mock).mockReturnValue(true);

  render(
    <AppContext.Provider value={mockAppContext}>
      <ApolloProvider client={mockClient}>
        <SiteTrackingContext.Provider value={mockSiteTrackingContext}>
          <HomeDetailsContext.Provider value={userData}>
            <HomeContainer />
          </HomeDetailsContext.Provider>
        </SiteTrackingContext.Provider>
      </ApolloProvider>
    </AppContext.Provider>
  );

  const greeting = screen.getByTestId('onboarding-module-page-greeting');
  expect(greeting).toBeInTheDocument();
});
