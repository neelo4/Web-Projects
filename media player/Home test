import { ApolloClient, ApolloError, ApolloProvider, InMemoryCache } from '@apollo/react-hooks';
import { screen } from '@testing-library/react';
import React from 'react';
import { render } from '../../test-utils/renderWithProviders';
import { useFeaturesConfig } from '../features-config';
import useDashboardDetails from '../hooks/api/useDashboardDetails';
import { SiteTrackingContext } from '../sitetracking/SiteTrackingProvider';
import { showDootbOnboardingModule } from '../utils/onboardingModuleUtils';
import HomeContainer, { HomeDetailsContext, OnboardingAndEdocsContext } from './HomeContainer';
import { useGetOnboardingAndEdocsDetails } from '../hooks/api/useGetOnboardingAndEdocsDetails';
import { AppContext } from '../AppContext';
import useAuth from '@iag/identity/useAuth';
import useBrowserDetect from '../hooks/useBrowserDetect';

// Keep all existing setup code unchanged
window.__webpack_require__ = {
  l: jest.fn(),
};

const featureFlagMocks = {
  USE_HERITAGE_CLAIM_VIEW_MFE: true,
};

const mockClient = new ApolloClient({
  cache: new InMemoryCache(),
  defaultOptions: {
    watchQuery: {
      fetchPolicy: 'no-cache',
      errorPolicy: 'all',
    },
    query: {
      fetchPolicy: 'no-cache',
      errorPolicy: 'all',
    },
  },
});

jest.mock('../iagBrandStore');
jest.mock('../hooks/api/useDashboardDetails');
jest.mock('../hooks/useBrowserDetect', () => jest.fn(() => ({ isMobileApp: false })));
jest.mock('@iag/identity/useAuth', () => () => ({ isAuthenticated: true }), { virtual: true });
jest.mock('../hooks/api/useGetOnboardingAndEdocsDetails');
jest.mock('../utils/onboardingModuleUtils');

const mockSiteTrackingContext = {
  setElement: jest.fn(),
  pageview: jest.fn(),
  pageviewImmediately: jest.fn(),
  dispatch: jest.fn(),
  detail: {},
};

const mockAppContext = {
  appState: {
    isOnboardingAndEdocsCallCompleted: true,
  },
  setAppState: jest.fn(),
};

const useHomeDetailsMock = useDashboardDetails as jest.MockedFunction<typeof useDashboardDetails>;
const useOnboardingDetailsMock = useGetOnboardingAndEdocsDetails as jest.MockedFunction<typeof useGetOnboardingAndEdocsDetails>;

const userData = {
  fullName: 'Tester',
  firstName: 'Tester',
  isStaffMember: false,
  email: 'jdisney@disney.com.au',
  preferredName: 'test',
  staffNumber: 'test',
};

const onboardingData = {
  isOnboardingComplete: false,
  isEdocsComplete: false,
};

const scrollIntoViewMock = jest.fn();

// Keep existing beforeAll and beforeEach unchanged
beforeAll(() => {
  window.HTMLElement.prototype.scrollIntoView = scrollIntoViewMock;
});

beforeEach(() => {
  jest.clearAllMocks();
  (useFeaturesConfig as jest.Mock).mockImplementation((featureName: keyof typeof featureFlagMocks) => {
    return featureFlagMocks[featureName];
  });
});

// Keep existing tests unchanged and add new tests below

// Additional test cases that weren't covered in the original file
describe('Additional HomeContainer Tests', () => {
  test('renders Home when onboarding is completed', () => {
    useHomeDetailsMock.mockReturnValue({
      loading: false,
      hasAuthenticationError: false,
      data: userData,
    });

    useOnboardingDetailsMock.mockReturnValue({
      loading: false,
      hasAuthenticationError: false,
      data: {
        ...onboardingData,
        isOnboardingComplete: true,
        isEdocsComplete: true,
      },
    });

    render(
      <AppContext.Provider value={mockAppContext}>
        <ApolloProvider client={mockClient}>
          <SiteTrackingContext.Provider value={mockSiteTrackingContext}>
            <HomeDetailsContext.Provider value={userData}>
              <OnboardingAndEdocsContext.Provider value={onboardingData}>
                <HomeContainer />
              </OnboardingAndEdocsContext.Provider>
            </HomeDetailsContext.Provider>
          </SiteTrackingContext.Provider>
        </ApolloProvider>
      </AppContext.Provider>
    );

    expect(screen.getByTestId('home')).toBeInTheDocument();
  });

  test('handles mobile app with incomplete onboarding', () => {
    (useBrowserDetect as jest.Mock).mockReturnValue({ isMobileApp: true });
    useHomeDetailsMock.mockReturnValue({
      loading: false,
      hasAuthenticationError: false,
      data: userData,
    });

    useOnboardingDetailsMock.mockReturnValue({
      loading: false,
      hasAuthenticationError: false,
      data: onboardingData,
    });

    (showDootbOnboardingModule as jest.Mock).mockReturnValue(true);

    render(
      <AppContext.Provider value={mockAppContext}>
        <ApolloProvider client={mockClient}>
          <SiteTrackingContext.Provider value={mockSiteTrackingContext}>
            <HomeDetailsContext.Provider value={userData}>
              <OnboardingAndEdocsContext.Provider value={onboardingData}>
                <HomeContainer />
              </OnboardingAndEdocsContext.Provider>
            </HomeDetailsContext.Provider>
          </SiteTrackingContext.Provider>
        </ApolloProvider>
      </AppContext.Provider>
    );

    expect(screen.getByTestId('onboarding-module')).toBeInTheDocument();
  });

  test('handles both dashboard and onboarding loading states simultaneously', () => {
    useHomeDetailsMock.mockReturnValue({
      loading: true,
      hasAuthenticationError: false,
    });

    useOnboardingDetailsMock.mockReturnValue({
      loading: true,
      hasAuthenticationError: false,
    });

    render(
      <AppContext.Provider value={mockAppContext}>
        <ApolloProvider client={mockClient}>
          <SiteTrackingContext.Provider value={mockSiteTrackingContext}>
            <HomeContainer />
          </SiteTrackingContext.Provider>
        </ApolloProvider>
      </AppContext.Provider>
    );

    expect(screen.getByTestId('DashboardLoader')).toBeInTheDocument();
    expect(screen.getByText('Retrieving your policies...')).toBeInTheDocument();
  });

  test('handles unauthenticated user state', () => {
    (useAuth as jest.Mock).mockReturnValue({ isAuthenticated: false });
    useHomeDetailsMock.mockReturnValue({
      loading: false,
      hasAuthenticationError: false,
      data: userData,
    });

    useOnboardingDetailsMock.mockReturnValue({
      loading: false,
      hasAuthenticationError: false,
      data: onboardingData,
    });

    render(
      <AppContext.Provider value={mockAppContext}>
        <ApolloProvider client={mockClient}>
          <SiteTrackingContext.Provider value={mockSiteTrackingContext}>
            <HomeContainer />
          </SiteTrackingContext.Provider>
        </ApolloProvider>
      </AppContext.Provider>
    );

    expect(showDootbOnboardingModule).toHaveBeenCalledWith(false, false, mockAppContext.appState);
  });

  test('handles onboarding error with valid dashboard data', () => {
    useHomeDetailsMock.mockReturnValue({
      loading: false,
      hasAuthenticationError: false,
      data: userData,
    });

    useOnboardingDetailsMock.mockReturnValue({
      loading: false,
      hasAuthenticationError: false,
      error: new ApolloError({ errorMessage: 'Failed to fetch onboarding data' }),
    });

    render(
      <AppContext.Provider value={mockAppContext}>
        <ApolloProvider client={mockClient}>
          <SiteTrackingContext.Provider value={mockSiteTrackingContext}>
            <HomeContainer />
          </SiteTrackingContext.Provider>
        </ApolloProvider>
      </AppContext.Provider>
    );

    expect(screen.getByTestId('TechnicalError')).toBeInTheDocument();
  });

  test('handles staff member data correctly', () => {
    useHomeDetailsMock.mockReturnValue({
      loading: false,
      hasAuthenticationError: false,
      data: {
        ...userData,
        isStaffMember: true,
      },
    });

    useOnboardingDetailsMock.mockReturnValue({
      loading: false,
      hasAuthenticationError: false,
      data: onboardingData,
    });

    render(
      <AppContext.Provider value={mockAppContext}>
        <ApolloProvider client={mockClient}>
          <SiteTrackingContext.Provider value={mockSiteTrackingContext}>
            <HomeDetailsContext.Provider value={{ ...userData, isStaffMember: true }}>
              <OnboardingAndEdocsContext.Provider value={onboardingData}>
                <HomeContainer />
              </OnboardingAndEdocsContext.Provider>
            </HomeDetailsContext.Provider>
          </SiteTrackingContext.Provider>
        </ApolloProvider>
      </AppContext.Provider>
    );

    expect(screen.getByTestId('home')).toBeInTheDocument();
  });
});
