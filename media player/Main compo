import { BrandDataProps, connectIagBrand } from '@iag-common/iag-brand-context';
import { GlobalEventsContext } from '@iag-common/mfe-global-events-context';
import { Button } from '@iag/chroma-react-ui.button';
import { Spinner } from '@iag/chroma-react-ui.spinner';
import React, { useContext, useEffect, useMemo, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { AppContext, AppState } from '../../../AppContext';
import { getBrand } from '../../../brand';
import {
  DOOTB_GOB_STEPS,
  DOOTB_ONBOARDING_TYPE,
} from '../../../components/shared/Constants';
import {
  ActionName,
  Activities,
  ElementType,
  FormName,
  Interaction,
  PageName,
  TransactionType,
} from '../../../models/SiteTracking';
import { SiteTrackingContext } from '../../../sitetracking/SiteTrackingProvider';
import { trackingEventWrapper } from '../../../sitetracking/TrackingEventWrapper';
import { exitOnboardingModule, triggerOnboardingSaveEDocsEvent } from '../../../utils/onboardingModuleUtils';
import { getPartyId } from '../../../utils/partyUtils';
import DownloadAppSection from './DownloadAppSection';
import EdocsSection from './EdocsSection';

type DigitalSetupPage = {
  handleSubmit?: (stepNumber: string) => void;
};

const DigitalSetupPage: React.FC<BrandDataProps & DigitalSetupPage> = ({ tt, handleSubmit }) => {
  const { appState, setAppState } = useContext(AppContext);
  const onboardingType = appState?.onboardingAndEdocsResult?.onboardingType;
  const eDocsUpdated = appState?.onboardingAndEdocsResult?.eDocsStatus;
  
  const brand = getBrand();
  const partyId = getPartyId();
  const primaryEmail = appState?.email;

  const [isEDocsConsentChecked, setIsEDocsConsentChecked] = useState<boolean>(true);
  const [isEDocsRequestComplete, setIsEDocsRequestComplete] = useState<boolean>(false);
  const [isResponseLoading, setIsResponseLoading] = useState<boolean>(false);

  const navigate = useNavigate();
  const trackingEventContext = useContext(SiteTrackingContext);
  const [isFormStarted, setIsFormStarted] = useState(false);
  const globalEventsContext = useContext(GlobalEventsContext);
  
  const siteTrackingData = {
    pageName: PageName.ONBOARDING_SETUP,
    globalEventsContext,
  };
  
  const isGeneralOnboarding = onboardingType === DOOTB_ONBOARDING_TYPE.GENERAL_ONBOARDING;
  const isMigrationOnboarding = onboardingType === DOOTB_ONBOARDING_TYPE.MIGRATION_ONBOARDING;

  useEffect(() => {
    trackingEventContext.dispatch({
      pageName: PageName.ONBOARDING_SETUP.toString(),
      interaction: Interaction.PAGEVIEW,
      data: {
        transactionType: TransactionType.DOOTB_ONBOARDING,
        transactionActivities: isGeneralOnboarding ? Activities.GENERAL_ONBOARDING : Activities.MIGRATION_ONBOARDING,
      },
    });
    
    const handleCheckboxEdocsEvent = (e: CustomEvent<{ status: boolean }>) => {
      if (!isFormStarted) {
        setIsFormStarted(true);
      }
      setIsEDocsConsentChecked(e.detail.status);
    };
    
    window.addEventListener('policy_corres_mgmt_mfe:checkbox_edocs', handleCheckboxEdocsEvent);
    return () => {
      window.removeEventListener('policy_corres_mgmt_mfe:checkbox_edocs', handleCheckboxEdocsEvent);
    };
  }, []);

  const callNextSteps = useMemo(() => {
    if (isEDocsRequestComplete) {
      if (isGeneralOnboarding) {
        if (isFormStarted) {
          trackingEventContext.dispatch({
            pageName: PageName.ONBOARDING_SETUP,
            interaction: Interaction.COMPLETE,
            data: {
              transactionType: TransactionType.DOOTB_ONBOARDING,
              transactionActivities: Activities.GENERAL_ONBOARDING,
            },
            element: {
              type: ElementType.FORM,
              name: ActionName.GENERAL_ONBOARDING,
            },
          });
          setIsFormStarted(false);
        }
        handleSubmit(DOOTB_GOB_STEPS.NEXT_BEST_ACTION_PAGE);
      } else if (isMigrationOnboarding) {
        if (isFormStarted) {
          trackingEventContext.dispatch({
            pageName: PageName.ONBOARDING_SETUP,
            interaction: Interaction.COMPLETE,
            data: {
              transactionComplete: true,
              transactionType: TransactionType.DOOTB_ONBOARDING,
              transactionActivities: Activities.MIGRATION_ONBOARDING,
            },
            element: {
              type: ElementType.FORM,
              name: ActionName.MIGRATION_ONBOARDING,
            },
          });
          setIsFormStarted(false);
        }
        exitOnboardingModule();
        navigate('/');
      }
    }
  }, [isEDocsRequestComplete]);

  const handleSave = () => {
    if (isGeneralOnboarding) {
      trackingEventWrapper({
        ...siteTrackingData,
        details: {
          interaction: Interaction.CLICK,
          transactionActivities: Activities.GENERAL_ONBOARDING,
          element: {
            form: FormName.GENERAL_ONBOARDING,
            type: ElementType.BUTTON,
            name: ActionName.SAVE_AND_CONTINUE,
          },
        },
      });
    }
    if (isMigrationOnboarding) {
      trackingEventWrapper({
        ...siteTrackingData,
        details: {
          interaction: Interaction.CLICK,
          transactionComplete: true,
          transactionType: TransactionType.DOOTB_ONBOARDING,
          transactionActivities: Activities.MIGRATION_ONBOARDING,
          element: {
            form: FormName.MIGRATION_ONBOARDING,
            type: ElementType.BUTTON,
            name: ActionName.SAVE_AND_CONTINUE,
          },
        },
      });
    }

    if (!isEDocsConsentChecked || eDocsUpdated) {
      if (isGeneralOnboarding) {
        if (isFormStarted) {
          trackingEventContext.dispatch({
            pageName: PageName.ONBOARDING_SETUP,
            interaction: Interaction.COMPLETE,
            data: {
              transactionType: TransactionType.DOOTB_ONBOARDING,
              transactionActivities: Activities.GENERAL_ONBOARDING,
            },
            element: {
              type: ElementType.FORM,
              name: ActionName.GENERAL_ONBOARDING,
            },
          });
          setIsFormStarted(false);
        }
        handleSubmit(DOOTB_GOB_STEPS.NEXT_BEST_ACTION_PAGE);
      } else if (isMigrationOnboarding) {
        if (isFormStarted) {
          trackingEventWrapper({
            ...siteTrackingData,
            details: {
              interaction: Interaction.COMPLETE,
              transactionType: TransactionType.DOOTB_ONBOARDING,
              transactionActivities: Activities.MIGRATION_ONBOARDING,
              element: {
                type: ElementType.FORM,
                name: ActionName.MIGRATION_ONBOARDING,
              },
            },
          });
          setIsFormStarted(false);
        }
        exitOnboardingModule();
        navigate('/');
      }
    } else {
      triggerOnboardingSaveEDocsEvent(true);
      callNextSteps;
    }
  };

  const handleSetting = (settingStatus: boolean) => {
    if (settingStatus) {
      trackingEventWrapper({
        ...siteTrackingData,
        details: {
          interaction: Interaction.CLICK,
          transactionComplete: true,
          transactionType: TransactionType.DOOTB_ONBOARDING,
          transactionActivities: isGeneralOnboarding ? ActionName.GENERAL_ONBOARDING : Activities.MIGRATION_ONBOARDING,
          element: {
            form: isGeneralOnboarding ? FormName.GENERAL_ONBOARDING : FormName.MIGRATION_ONBOARDING,
            type: ElementType.LINK,
            name: ActionName.DOOTB_LINK_CLICK,
          },
        },
      });
      exitOnboardingModule();
    }
  };

  return (
    <div data-testid="general-digital-setup-page" className="flex flex-col gap-8 pt-4 pr-4 sm:pt-0">
      <div className="flex flex-
