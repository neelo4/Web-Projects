import React, { useContext, useEffect } from 'react';
import { Spinner } from '@iag/chroma-react-ui.spinner';
import ErrorBoundary, { ErrorTypeCode } from '../../../components/ErrorBoundary';
import { lazy, Suspense } from 'react';
import { Brand } from '../../../models/Brand';
import sessionId from '../../../sessionId';
import { BrandDataProps, connectIagBrand } from '@iag-common/iag-brand-context';
import { AppContext } from '../../../AppContext';

const OnboardingEDocsConversionRemote = lazy(
  () => import('@iag/policy-correspondence-mfe/OnboardingModuleEDocsConversion'),
);

interface EdocsSectionProps {
  brand: Brand;
  partyId: string;
  primaryEmail: string;
  eDocsStatus: boolean;
  handleSettingLink: (settingStatus: boolean) => void;
  setIsEDocsRequestComplete: (status: boolean) => void;
  setIsResponseLoading: (status: boolean) => void;

  // setIsEDocsConsentChecked: (status: boolean) => void;
}

const EDocsSection : React.FC<BrandDataProps & EdocsSectionProps> = ({ brand,
  partyId,
  primaryEmail,
  handleSettingLink,
  setIsEDocsRequestComplete,
  setIsResponseLoading,
  eDocsStatus
  // setIsEDocsConsentChecked,
}) => {
  const { appState } = useContext(AppContext);
  // const eDocsUpdated = appState?.onboardingAndEdocsResult?.eDocsStatus;

  useEffect(() => {
    const handleSaveEdocsEvent = (e: CustomEvent<{ status: boolean; loadingStatus: boolean }>) => {
      const responseStatus = e.detail.status;
      if (responseStatus !== undefined) {
        setIsResponseLoading(e.detail.loadingStatus);
        setIsEDocsRequestComplete(!e.detail.loadingStatus && (responseStatus === true || responseStatus === false));
      }
    };

    window.addEventListener('policy_corres_mgmt_mfe:save_edocs', handleSaveEdocsEvent);
    return () => {
      window.removeEventListener('policy_corres_mgmt_mfe:save_edocs', handleSaveEdocsEvent);
    };
  }, []);

  return (
    <div data-testid="switch-to-edocs-section" className="px-2 py-2 border border-primary-lighter">
      <ErrorBoundary errorType={ErrorTypeCode.EdocsConversion}>
        <Suspense fallback={<Spinner className="left-1/2" />}>
          <OnboardingEDocsConversionRemote
            brand={brand}
            partyId={partyId}
            xIagContext={{ sessionId }}
            primaryEmail={primaryEmail}
            eDocsStatus={eDocsStatus}
            handleSettingLink={handleSettingLink}
          />
        </Suspense>
      </ErrorBoundary>
    </div>
  );
};

export default connectIagBrand()(EDocsSection);
