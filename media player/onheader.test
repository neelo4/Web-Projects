import { screen } from '@testing-library/react';
import React from 'react';
import { render } from '../../../test-utils/renderWithProviders';
import { AppContext } from '../../AppContext';
import { Brand } from '../../models/Brand';
import OnboardingHeader from './OnboardingHeader';

jest.mock('@iag/identity/useAuth', () => () => ({ isAuthenticated: true }), { virtual: true });

const mockAppState = {
  appState: {
    fullName: 'Test',
    firstName: 'Tester',
  },
  setAppState: jest.fn(),
};

describe('OnboardingHeader Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    window.__CLIENT_VARS__.brand = Brand.NRMA;
  });

  // Existing tests remain unchanged...

  // New test cases for additional coverage
  
  test('displays preferred name when available instead of firstName', () => {
    render(
      <AppContext.Provider
        value={{
          ...mockAppState,
          appState: {
            ...mockAppState.appState,
            firstName: 'Tester',
            preferredName: 'Nick'
          },
        }}
      >
        <OnboardingHeader />
      </AppContext.Provider>,
      { bare: true },
    );
    
    const greeting = screen.getByTestId('onboarding-module-page-greeting');
    expect(greeting.textContent).toContain('Nick');
  });

  test('uses firstName when preferredName is empty string', () => {
    render(
      <AppContext.Provider
        value={{
          ...mockAppState,
          appState: {
            ...mockAppState.appState,
            firstName: 'Tester',
            preferredName: ''
          },
        }}
      >
        <OnboardingHeader />
      </AppContext.Provider>,
      { bare: true },
    );
    
    const greeting = screen.getByTestId('onboarding-module-page-greeting');
    expect(greeting.textContent).toContain('Tester');
  });

  test('does not display greeting when firstName is not available', () => {
    render(
      <AppContext.Provider
        value={{
          ...mockAppState,
          appState: {
            ...mockAppState.appState,
            firstName: undefined
          },
        }}
      >
        <OnboardingHeader />
      </AppContext.Provider>,
      { bare: true },
    );
    
    const greeting = screen.queryByTestId('onboarding-module-page-greeting');
    expect(greeting).not.toBeInTheDocument();
  });

  test('displays empty greeting message when onboardingType is undefined', () => {
    render(
      <AppContext.Provider
        value={{
          ...mockAppState,
          appState: {
            ...mockAppState.appState,
            onboardingAndEdocsResult: {
              showOnboarding: true,
              onboardingType: undefined,
              showEdocsModal: false,
              eDocsStatus: true,
            },
          },
        }}
      >
        <OnboardingHeader />
      </AppContext.Provider>,
      { bare: true },
    );
    
    const greetingMessage = screen.getByTestId('onboarding-module-page-greeting-message');
    expect(greetingMessage.textContent).toBe('');
  });

  test('renders Logo component with correct variant', () => {
    const { container } = render(
      <AppContext.Provider value={mockAppState}>
        <OnboardingHeader />
      </AppContext.Provider>,
      { bare: true },
    );
    
    // Note: The exact implementation of this test might need to be adjusted 
    // based on how the Logo component is structured and what it renders
    expect(container.querySelector('.logo-light')).toBeInTheDocument();
  });

  test('renders with correct responsive classes', () => {
    const { container } = render(
      <AppContext.Provider value={mockAppState}>
        <OnboardingHeader />
      </AppContext.Provider>,
      { bare: true },
    );

    // Test for responsive container classes
    expect(container.querySelector('.pt-10')).toBeInTheDocument();
    expect(container.querySelector('.pb-5')).toBeInTheDocument();
    expect(container.querySelector('.sm\\:pb-10')).toBeInTheDocument();
    
    // Test for responsive image container
    const imageContainer = container.querySelector('.hidden.sm\\:block');
    expect(imageContainer).toBeInTheDocument();
  });

  test('renders image with correct dimensions', () => {
    render(
      <AppContext.Provider value={mockAppState}>
        <OnboardingHeader />
      </AppContext.Provider>,
      { bare: true },
    );

    const image = screen.getByAltText('onboarding-image');
    expect(image).toHaveClass('w-[410px]');
    expect(image).toHaveClass('h-[300px]');
  });
});
