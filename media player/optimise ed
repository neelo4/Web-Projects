// EDocsSection.tsx
import { BrandDataProps, connectIagBrand } from '@iag-common/iag-brand-context';
import { Spinner } from '@iag/chroma-react-ui.spinner';
import React, { lazy, Suspense, useContext, useEffect, memo } from 'react';
import { AppContext } from '../../../AppContext';
import ErrorBoundary, { ErrorTypeCode } from '../../../components/ErrorBoundary';
import { Brand } from '../../../models/Brand';
import sessionId from '../../../sessionId';

// Pre-initialize the remote component load
const eDocsModulePromise = import('@iag/policy-correspondence-mfe/OnboardingModuleEDocsConversion');
const OnboardingEDocsConversionRemote = lazy(() => eDocsModulePromise);

interface EdocsSectionProps {
  brand: Brand;
  partyId: string;
  primaryEmail: string;
  eDocsStatus: boolean;
  handleSettingLink: (settingStatus: boolean) => void;
  setIsEDocsRequestComplete: (status: boolean) => void;
  setIsResponseLoading: (status: boolean) => void;
  onLoad?: () => void;
}

const EDocsSection: React.FC<BrandDataProps & EdocsSectionProps> = memo(({
  tt,
  brand,
  partyId,
  primaryEmail,
  handleSettingLink,
  setIsEDocsRequestComplete,
  setIsResponseLoading,
  eDocsStatus,
  onLoad
}) => {
  useEffect(() => {
    // Notify parent when component is mounted
    onLoad?.();

    const handleSaveEdocsEvent = (e: CustomEvent<{ status: boolean; loadingStatus: boolean }>) => {
      const responseStatus = e.detail.status;
      if (responseStatus !== undefined) {
        setIsResponseLoading(e.detail.loadingStatus);
        setIsEDocsRequestComplete(!e.detail.loadingStatus && (responseStatus === true || responseStatus === false));
      }
    };

    window.addEventListener('policy_corres_mgmt_mfe:save_edocs', handleSaveEdocsEvent);
    return () => {
      window.removeEventListener('policy_corres_mgmt_mfe:save_edocs', handleSaveEdocsEvent);
    };
  }, [setIsEDocsRequestComplete, setIsResponseLoading, onLoad]);

  return (
    <div data-testid="switch-to-edocs-section" className={`px-2 py-2 border border-${tt('constants.borderColor')}`}>
      <ErrorBoundary errorType={ErrorTypeCode.EdocsConversion}>
        <Suspense fallback={
          <div className="flex items-center justify-center p-4">
            <Spinner className="mr-2" />
            <span>Loading E-Docs...</span>
          </div>
        }>
          <OnboardingEDocsConversionRemote
            brand={brand}
            partyId={partyId}
            xIagContext={{ sessionId }}
            primaryEmail={primaryEmail}
            eDocsStatus={eDocsStatus}
            handleSettingLink={handleSettingLink}
          />
        </Suspense>
      </ErrorBoundary>
    </div>
  );
});

EDocsSection.displayName = 'EDocsSection';

export default connectIagBrand()(EDocsSection);
