// DigitalSetupPage.tsx
import { BrandDataProps, connectIagBrand } from '@iag-common/iag-brand-context';
import { GlobalEventsContext } from '@iag-common/mfe-global-events-context';
import { Button } from '@iag/chroma-react-ui.button';
import { Spinner } from '@iag/chroma-react-ui.spinner';
import React, { Suspense, useContext, useEffect, useMemo, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { AppContext, AppState } from '../../../AppContext';
import { getBrand } from '../../../brand';
import { DOOTB_GOB_STEPS, DOOTB_ONBOARDING_TYPE } from '../../../components/shared/Constants';

// Progressive loading strategy
const DownloadAppSection = React.lazy(() => 
  Promise.all([
    import('./DownloadAppSection'),
    // Artificial delay to ensure smoother UX
    new Promise(resolve => setTimeout(resolve, 100))
  ]).then(([module]) => module)
);

// Start loading EDocs component immediately when JS loads
const eDocsPromise = import('./EDocsSection').then(module => module.default);

// Progressively load EDocsSection with priority
const EDocsSection = React.lazy(() => eDocsPromise);

// Optimized loading state components
const SectionLoader = ({ label }: { label: string }) => (
  <div className="animate-pulse bg-gray-100 rounded-md p-4 flex items-center justify-center">
    <Spinner className="mr-2" />
    <span>{label}</span>
  </div>
);

const DigitalSetupPage: React.FC<BrandDataProps & DigitalSetupPage> = ({ tt, handleSubmit }) => {
  const { appState, setAppState } = useContext(AppContext);
  const onboardingType = appState?.onboardingAndEdocsResult?.onboardingType;
  const eDocsUpdated = appState?.onboardingAndEdocsResult?.eDocsStatus;
  const [sectionsLoaded, setSectionsLoaded] = useState({
    downloadApp: false,
    eDocs: false
  });

  const brand = getBrand() as Brand;
  const partyId = getPartyId();
  const primaryEmail = appState?.email;
  const navigate = useNavigate();
  const trackingEventContext = useContext(SiteTrackingContext);
  const globalEventsContext = useContext(GlobalEventsContext);
  
  // Pre-load EDocs data if possible
  useEffect(() => {
    // Start loading EDocs data early
    if (partyId && primaryEmail) {
      // You can start prefetching any necessary EDocs data here
      prefetchEDocsData(partyId, primaryEmail);
    }
  }, [partyId, primaryEmail]);

  // Track component loading
  const handleSectionLoad = (section: 'downloadApp' | 'eDocs') => {
    setSectionsLoaded(prev => ({
      ...prev,
      [section]: true
    }));
  };

  // Progressive loading of sections
  return (
    <div data-testid="general-digital-setup-page" className="flex flex-col gap-8 pt-4 pr-4 sm:pt-0">
      <div className="flex flex-col gap-3 mt-8 sm:mt-12">
        {isGeneralOnboarding && (
          <p data-testid="step-number" className="text-base sm:text-lg font-medium">
            {tt('onboardingModule.page2Common.step')}
          </p>
        )}
        <h2 data-testid="page-title" className="-mt-2 text-xl sm:text-2xl sm:pb-4 font-medium">
          {tt('onboardingModule.page2Common.title')}
        </h2>
        <p data-testid="page-selection" className="sm:-mt-4 text-base mb-0 font-normal">
          {tt('onboardingModule.page2Common.subTitle')}
        </p>
      </div>

      {/* Progressive loading of DownloadAppSection */}
      <Suspense fallback={<SectionLoader label="Loading app section..." />}>
        <DownloadAppSection onLoad={() => handleSectionLoad('downloadApp')} />
      </Suspense>

      {/* Priority loading of EDocsSection */}
      <Suspense 
        fallback={
          <div className="border border-gray-200 p-4">
            <SectionLoader label="Loading E-Docs section..." />
          </div>
        }
      >
        <EDocsSection
          brand={brand}
          partyId={partyId}
          primaryEmail={primaryEmail}
          eDocsStatus={eDocsUpdated}
          handleSettingLink={handleSetting}
          setIsEDocsRequestComplete={setIsEDocsRequestComplete}
          setIsResponseLoading={setIsResponseLoading}
          onLoad={() => handleSectionLoad('eDocs')}
        />
      </Suspense>

      {/* Action buttons */}
      <div className="flex flex-col flex-wrap gap-8 sm:flex-row">
        <Button 
          data-testid="continue-setup-button"
          variant="primary" 
          className="mt-3 ml-6"
          onClick={handleSave}
          disabled={!sectionsLoaded.eDocs} // Only enable when EDocs is loaded
        >
          {eDocsUpdated
            ? tt('onboardingModule.page2Common.buttonContinue')
            : tt('onboardingModule.page2Common.buttonSaveAndContinue')}
        </Button>
      </div>
    </div>
  );
};

export default connectIagBrand()(DigitalSetupPage);
