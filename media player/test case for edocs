// EdocsSection.test.tsx
import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import EDocsSection from './EDocsSection';
import { AppContext } from '../../../AppContext';
import { Brand } from '../../../models/Brand';

// Mock the lazy-loaded component
jest.mock('@iag/policy-correspondence-mfe/OnboardingModuleEDocsConversion', () => ({
  __esModule: true,
  default: () => <div data-testid="mocked-edocs-conversion">Mocked EDocs Conversion</div>,
}));

const mockBrand: Brand = {
  name: 'TestBrand',
  code: 'TEST',
} as Brand;

const defaultProps = {
  brand: mockBrand,
  partyId: '12345',
  primaryEmail: 'test@example.com',
  eDocsStatus: false,
  handleSettingLink: jest.fn(),
  setIsEDocsRequestComplete: jest.fn(),
  setIsResponseLoading: jest.fn(),
  tt: jest.fn((key) => key),
};

const mockAppContextValue = {
  appState: {
    onboardingAndEdocsResult: {
      eDocsStatus: false,
    },
  },
  setAppState: jest.fn(),
};

describe('EDocsSection', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  const renderComponent = (props = {}) => {
    return render(
      <AppContext.Provider value={mockAppContextValue}>
        <EDocsSection {...defaultProps} {...props} />
      </AppContext.Provider>
    );
  };

  it('renders without crashing', () => {
    renderComponent();
    expect(screen.getByTestId('switch-to-edocs-section')).toBeInTheDocument();
  });

  it('renders spinner while loading OnboardingEDocsConversionRemote', () => {
    renderComponent();
    expect(screen.getByRole('status')).toBeInTheDocument(); // Spinner has role="status"
  });

  it('renders OnboardingEDocsConversionRemote with correct props', async () => {
    renderComponent();
    await waitFor(() => {
      expect(screen.getByTestId('mocked-edocs-conversion')).toBeInTheDocument();
    });
  });

  describe('Event Handlers', () => {
    it('handles save edocs event correctly when status is true', () => {
      renderComponent();

      // Create and dispatch a custom event
      const saveEdocsEvent = new CustomEvent('policy_corres_mgmt_mfe:save_edocs', {
        detail: { status: true, loadingStatus: false },
      });
      window.dispatchEvent(saveEdocsEvent);

      expect(defaultProps.setIsResponseLoading).toHaveBeenCalledWith(false);
      expect(defaultProps.setIsEDocsRequestComplete).toHaveBeenCalledWith(true);
    });

    it('handles save edocs event correctly when loading', () => {
      renderComponent();

      const saveEdocsEvent = new CustomEvent('policy_corres_mgmt_mfe:save_edocs', {
        detail: { status: true, loadingStatus: true },
      });
      window.dispatchEvent(saveEdocsEvent);

      expect(defaultProps.setIsResponseLoading).toHaveBeenCalledWith(true);
      expect(defaultProps.setIsEDocsRequestComplete).toHaveBeenCalledWith(false);
    });

    it('handles save edocs event correctly when status is undefined', () => {
      renderComponent();

      const saveEdocsEvent = new CustomEvent('policy_corres_mgmt_mfe:save_edocs', {
        detail: { status: undefined, loadingStatus: false },
      });
      window.dispatchEvent(saveEdocsEvent);

      expect(defaultProps.setIsResponseLoading).not.toHaveBeenCalled();
      expect(defaultProps.setIsEDocsRequestComplete).not.toHaveBeenCalled();
    });
  });

  describe('Error Boundary', () => {
    beforeEach(() => {
      // Suppress console.error for error boundary testing
      jest.spyOn(console, 'error').mockImplementation(() => {});
    });

    afterEach(() => {
      jest.restoreAllMocks();
    });

    it('renders error boundary when OnboardingEDocsConversionRemote throws', async () => {
      // Mock the component to throw an error
      jest.mock('@iag/policy-correspondence-mfe/OnboardingModuleEDocsConversion', () => ({
        __esModule: true,
        default: () => {
          throw new Error('Test error');
        },
      }));

      renderComponent();

      // Verify error boundary catches the error
      await waitFor(() => {
        expect(screen.queryByTestId('mocked-edocs-conversion')).not.toBeInTheDocument();
      });
    });
  });

  describe('Cleanup', () => {
    it('removes event listeners on unmount', () => {
      const { unmount } = renderComponent();
      
      // Spy on removeEventListener
      const removeEventListenerSpy = jest.spyOn(window, 'removeEventListener');
      
      unmount();

      expect(removeEventListenerSpy).toHaveBeenCalledWith(
        'policy_corres_mgmt_mfe:save_edocs',
        expect.any(Function)
      );
    });
  });

  describe('Props Handling', () => {
    it('passes correct props to OnboardingEDocsConversionRemote', async () => {
      const customProps = {
        brand: { ...mockBrand, name: 'CustomBrand' },
        partyId: 'custom-party-id',
        primaryEmail: 'custom@example.com',
        eDocsStatus: true,
      };

      renderComponent(customProps);

      await waitFor(() => {
        const edocsComponent = screen.getByTestId('mocked-edocs-conversion');
        expect(edocsComponent).toBeInTheDocument();
      });
    });
  });
});
