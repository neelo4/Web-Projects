describe('useGetOnboardingAndEdocsDetails - Tracking Events', () => {
  // Setup tracking context mock
  const mockTrackingDispatch = jest.fn();
  const mockSetAppState = jest.fn();

  // Clear mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
    (useFeaturesConfig as jest.Mock).mockReturnValue(true);
    (useBrowserDetect as jest.Mock).mockReturnValue({ isMobileApp: false });
    (getActivePolicyStatus as jest.Mock).mockReturnValue(['ACTIVE']);
  });

  // Create wrapper with tracking context
  const createWrapper = (mocks: any[] = []) => {
    return ({ children }: { children: React.ReactNode }) => (
      <SiteTrackingContext.Provider 
        value={{
          dispatch: mockTrackingDispatch,
          settlement: null,
          pageview: null,
          pageviewImmediately: null
        }}
      >
        <AppContext.Provider value={{ setAppState: mockSetAppState, appState: {} }}>
          <MockedProvider mocks={mocks} addTypename={false}>
            {children}
          </MockedProvider>
        </AppContext.Provider>
      </SiteTrackingContext.Provider>
    );
  };

  it('should dispatch tracking event when eDocsStatus is true', () => {
    // Mock API response
    const mockData = {
      getOnboardingAndEdocsStatus: {
        showOnboarding: true,
        showEdocs: true,
        onboardingType: 'GOB',
        eDocsStatus: true
      }
    };

    // Setup API mock
    (useApiQuery as jest.Mock).mockImplementation(() => ({
      data: mockData,
      loading: false,
      error: null
    }));

    // Render hook
    renderHook(() => useGetOnboardingAndEdocsDetails(mockSetAppState), {
      wrapper: createWrapper([])
    });

    // Assert tracking dispatch
    expect(mockTrackingDispatch).toHaveBeenCalledWith(
      expect.objectContaining({
        interaction: Interaction.HIDE,
        element: {
          name: 'skip-onboarding',
          value: 'edocs-enabled',
          type: ElementType.MESSAGE
        }
      })
    );
  });

  it('should not dispatch tracking event when eDocsStatus is false', () => {
    // Mock API response with eDocsStatus false
    const mockData = {
      getOnboardingAndEdocsStatus: {
        showOnboarding: true,
        showEdocs: false,
        onboardingType: 'GOB',
        eDocsStatus: false
      }
    };

    // Setup API mock
    (useApiQuery as jest.Mock).mockImplementation(() => ({
      data: mockData,
      loading: false,
      error: null
    }));

    // Render hook
    renderHook(() => useGetOnboardingAndEdocsDetails(mockSetAppState), {
      wrapper: createWrapper([])
    });

    // Assert no tracking dispatch
    expect(mockTrackingDispatch).not.toHaveBeenCalled();
  });
});
