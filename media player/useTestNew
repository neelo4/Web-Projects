it('should dispatch tracking event when eDocsStatus is true', async () => {
  const mockOnboardingData = {
    getOnboardingAndEdocsStatus: {
      showOnboarding: true,
      showEdocs: true,
      onboardingType: 'GOB',
      eDocsStatus: true,
      policies: ['policy1']
    },
  };

  const mocks = [
    {
      request: {
        query: ONBOARDING_QUERY,
        variables: {
          policy_statuses: ['ACTIVE'],
        },
      },
      result: {
        data: mockOnboardingData,
      },
    },
  ];

  // Define the type for the rendered result
  const { result, waitFor } = renderHook(
    () => useGetOnboardingAndEdocsDetails(mockAppState.setAppState),
    { wrapper: createWrapperWithTracking(mocks) }
  );

  // Wait for initial render and updates
  await act(async () => {
    await new Promise(resolve => setTimeout(resolve, 0));
  });

  // Assert the tracking event was dispatched
  await waitFor(
    () => {
      expect(mockDispatch).toHaveBeenCalledWith({
        interaction: Interaction.HIDE,
        element: {
          name: 'skip-onboarding',
          value: 'edocs-enabled',
          type: ElementType.MESSAGE,
        },
      });
    },
    { timeout: 2000 }
  );
});
